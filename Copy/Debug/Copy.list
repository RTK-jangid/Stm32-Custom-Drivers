
Copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000108c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001214  08001214  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001214  08001214  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08001214  08001214  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001214  08001214  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001214  08001214  00011214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001218  08001218  00011218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800121c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          00000048  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000184f  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005a3  00000000  00000000  000218fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001e0  00000000  00000000  00021ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000163  00000000  00000000  00022080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002864  00000000  00000000  000221e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001d96  00000000  00000000  00024a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a1d4  00000000  00000000  000267dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000072c  00000000  00000000  000309b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000310e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011fc 	.word	0x080011fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	080011fc 	.word	0x080011fc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <I2C1_GPIOInits+0x40>)
 80001e0:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001e6:	2301      	movs	r3, #1
 80001e8:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80001ea:	2301      	movs	r3, #1
 80001ec:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 80001f6:	2308      	movs	r3, #8
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f959 	bl	80004b4 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000202:	2309      	movs	r3, #9
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f953 	bl	80004b4 <GPIO_Init>


}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40020400 	.word	0x40020400

0800021c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <I2C1_Inits+0x2c>)
 8000222:	4a0a      	ldr	r2, [pc, #40]	; (800024c <I2C1_Inits+0x30>)
 8000224:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <I2C1_Inits+0x2c>)
 8000228:	2201      	movs	r2, #1
 800022a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <I2C1_Inits+0x2c>)
 800022e:	2269      	movs	r2, #105	; 0x69
 8000230:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000232:	4b05      	ldr	r3, [pc, #20]	; (8000248 <I2C1_Inits+0x2c>)
 8000234:	2200      	movs	r2, #0
 8000236:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <I2C1_Inits+0x2c>)
 800023a:	4a05      	ldr	r2, [pc, #20]	; (8000250 <I2C1_Inits+0x34>)
 800023c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800023e:	4802      	ldr	r0, [pc, #8]	; (8000248 <I2C1_Inits+0x2c>)
 8000240:	f000 fc2a 	bl	8000a98 <I2C_Init>

}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000054 	.word	0x20000054
 800024c:	40005400 	.word	0x40005400
 8000250:	000186a0 	.word	0x000186a0

08000254 <main>:

}


int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0


	//GPIO_ButtonInit();

	//i2c pin inits
	I2C1_GPIOInits();
 8000258:	f7ff ffbe 	bl	80001d8 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 800025c:	f7ff ffde 	bl	800021c <I2C1_Inits>

	//I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 8000260:	2101      	movs	r1, #1
 8000262:	201f      	movs	r0, #31
 8000264:	f000 fce6 	bl	8000c34 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 8000268:	2101      	movs	r1, #1
 800026a:	2020      	movs	r0, #32
 800026c:	f000 fce2 	bl	8000c34 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1,ENABLE);
 8000270:	2101      	movs	r1, #1
 8000272:	4806      	ldr	r0, [pc, #24]	; (800028c <main+0x38>)
 8000274:	f000 fb33 	bl	80008de <I2C_SlaveEnableDisableCallbackEvents>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	4804      	ldr	r0, [pc, #16]	; (800028c <main+0x38>)
 800027c:	f000 fb63 	bl	8000946 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8000280:	2101      	movs	r1, #1
 8000282:	4802      	ldr	r0, [pc, #8]	; (800028c <main+0x38>)
 8000284:	f000 fcba 	bl	8000bfc <I2C_ManageAcking>

	while(1);
 8000288:	e7fe      	b.n	8000288 <main+0x34>
 800028a:	bf00      	nop
 800028c:	40005400 	.word	0x40005400

08000290 <I2C1_EV_IRQHandler>:

}


void I2C1_EV_IRQHandler (void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000294:	4802      	ldr	r0, [pc, #8]	; (80002a0 <I2C1_EV_IRQHandler+0x10>)
 8000296:	f000 fe2a 	bl	8000eee <I2C_EV_IRQHandling>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000054 	.word	0x20000054

080002a4 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler (void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80002a8:	4802      	ldr	r0, [pc, #8]	; (80002b4 <I2C1_ER_IRQHandler+0x10>)
 80002aa:	f000 fefc 	bl	80010a6 <I2C_ER_IRQHandling>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000054 	.word	0x20000054

080002b8 <I2C_ApplicationEventCallback>:




void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]

	static uint8_t commandCode = 0;
	static  uint8_t Cnt = 0;

	if(AppEv == I2C_EV_DATA_REQ)
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b08      	cmp	r3, #8
 80002c8:	d123      	bne.n	8000312 <I2C_ApplicationEventCallback+0x5a>
	{
		//Master wants some data. slave has to send it
		if(commandCode == 0x51)
 80002ca:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <I2C_ApplicationEventCallback+0x90>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b51      	cmp	r3, #81	; 0x51
 80002d0:	d10b      	bne.n	80002ea <I2C_ApplicationEventCallback+0x32>
		{
			//send the length information to the master
			I2C_SlaveSendData(pI2CHandle->pI2Cx,strlen((char*)Tx_buf));
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681c      	ldr	r4, [r3, #0]
 80002d6:	481d      	ldr	r0, [pc, #116]	; (800034c <I2C_ApplicationEventCallback+0x94>)
 80002d8:	f7ff ff76 	bl	80001c8 <strlen>
 80002dc:	4603      	mov	r3, r0
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	4619      	mov	r1, r3
 80002e2:	4620      	mov	r0, r4
 80002e4:	f000 fde7 	bl	8000eb6 <I2C_SlaveSendData>
	{
		//This happens only during slave reception .
		//Master has ended the I2C communication with the slave.
	}

}
 80002e8:	e029      	b.n	800033e <I2C_ApplicationEventCallback+0x86>
		}else if (commandCode == 0x52)
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <I2C_ApplicationEventCallback+0x90>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b52      	cmp	r3, #82	; 0x52
 80002f0:	d125      	bne.n	800033e <I2C_ApplicationEventCallback+0x86>
			I2C_SlaveSendData(pI2CHandle->pI2Cx,Tx_buf[Cnt++]);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b16      	ldr	r3, [pc, #88]	; (8000350 <I2C_ApplicationEventCallback+0x98>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	1c59      	adds	r1, r3, #1
 80002fc:	b2c8      	uxtb	r0, r1
 80002fe:	4914      	ldr	r1, [pc, #80]	; (8000350 <I2C_ApplicationEventCallback+0x98>)
 8000300:	7008      	strb	r0, [r1, #0]
 8000302:	4619      	mov	r1, r3
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <I2C_ApplicationEventCallback+0x94>)
 8000306:	5c5b      	ldrb	r3, [r3, r1]
 8000308:	4619      	mov	r1, r3
 800030a:	4610      	mov	r0, r2
 800030c:	f000 fdd3 	bl	8000eb6 <I2C_SlaveSendData>
}
 8000310:	e015      	b.n	800033e <I2C_ApplicationEventCallback+0x86>
	}else if (AppEv == I2C_EV_DATA_RCV)
 8000312:	78fb      	ldrb	r3, [r7, #3]
 8000314:	2b09      	cmp	r3, #9
 8000316:	d109      	bne.n	800032c <I2C_ApplicationEventCallback+0x74>
		commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fdd9 	bl	8000ed4 <I2C_SlaveReceiveData>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <I2C_ApplicationEventCallback+0x90>)
 8000328:	701a      	strb	r2, [r3, #0]
}
 800032a:	e008      	b.n	800033e <I2C_ApplicationEventCallback+0x86>
	}else if (AppEv == I2C_ERROR_AF)
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	2b05      	cmp	r3, #5
 8000330:	d105      	bne.n	800033e <I2C_ApplicationEventCallback+0x86>
		commandCode = 0xff;
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <I2C_ApplicationEventCallback+0x90>)
 8000334:	22ff      	movs	r2, #255	; 0xff
 8000336:	701a      	strb	r2, [r3, #0]
		Cnt = 0;
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <I2C_ApplicationEventCallback+0x98>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bd90      	pop	{r4, r7, pc}
 8000346:	bf00      	nop
 8000348:	2000007c 	.word	0x2000007c
 800034c:	20000000 	.word	0x20000000
 8000350:	2000007d 	.word	0x2000007d

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 ff17 	bl	80011b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff65 	bl	8000254 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000398:	0800121c 	.word	0x0800121c
  ldr r2, =_sbss
 800039c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80003a0:	20000080 	.word	0x20000080

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d161      	bne.n	800047e <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a33      	ldr	r2, [pc, #204]	; (800048c <GPIO_PeriClockControl+0xe4>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003c2:	4b33      	ldr	r3, [pc, #204]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a32      	ldr	r2, [pc, #200]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 80003ce:	e056      	b.n	800047e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a30      	ldr	r2, [pc, #192]	; (8000494 <GPIO_PeriClockControl+0xec>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003d8:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e04b      	b.n	800047e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <GPIO_PeriClockControl+0xf0>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ee:	4b28      	ldr	r3, [pc, #160]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a27      	ldr	r2, [pc, #156]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e040      	b.n	800047e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a27      	ldr	r2, [pc, #156]	; (800049c <GPIO_PeriClockControl+0xf4>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000404:	4b22      	ldr	r3, [pc, #136]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a21      	ldr	r2, [pc, #132]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e035      	b.n	800047e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a22      	ldr	r2, [pc, #136]	; (80004a0 <GPIO_PeriClockControl+0xf8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 8000420:	f043 0310 	orr.w	r3, r3, #16
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e02a      	b.n	800047e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <GPIO_PeriClockControl+0xfc>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a16      	ldr	r2, [pc, #88]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e01f      	b.n	800047e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a19      	ldr	r2, [pc, #100]	; (80004a8 <GPIO_PeriClockControl+0x100>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a11      	ldr	r2, [pc, #68]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 800044c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e014      	b.n	800047e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <GPIO_PeriClockControl+0x104>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 8000462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e009      	b.n	800047e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <GPIO_PeriClockControl+0x108>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d105      	bne.n	800047e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a06      	ldr	r2, [pc, #24]	; (8000490 <GPIO_PeriClockControl+0xe8>)
 8000478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40020000 	.word	0x40020000
 8000490:	40023800 	.word	0x40023800
 8000494:	40020400 	.word	0x40020400
 8000498:	40020800 	.word	0x40020800
 800049c:	40020c00 	.word	0x40020c00
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40021400 	.word	0x40021400
 80004a8:	40021800 	.word	0x40021800
 80004ac:	40021c00 	.word	0x40021c00
 80004b0:	40022000 	.word	0x40022000

080004b4 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2101      	movs	r1, #1
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ff6e 	bl	80003a8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d820      	bhi.n	8000516 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	2103      	movs	r1, #3
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	43db      	mvns	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	400a      	ands	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	e0cb      	b.n	80006ae <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b04      	cmp	r3, #4
 800051c:	d117      	bne.n	800054e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	4b4b      	ldr	r3, [pc, #300]	; (800064c <GPIO_Init+0x198>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	4611      	mov	r1, r2
 800052e:	4a47      	ldr	r2, [pc, #284]	; (800064c <GPIO_Init+0x198>)
 8000530:	430b      	orrs	r3, r1
 8000532:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000534:	4b45      	ldr	r3, [pc, #276]	; (800064c <GPIO_Init+0x198>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7912      	ldrb	r2, [r2, #4]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	43d2      	mvns	r2, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a41      	ldr	r2, [pc, #260]	; (800064c <GPIO_Init+0x198>)
 8000548:	400b      	ands	r3, r1
 800054a:	6093      	str	r3, [r2, #8]
 800054c:	e035      	b.n	80005ba <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	795b      	ldrb	r3, [r3, #5]
 8000552:	2b05      	cmp	r3, #5
 8000554:	d117      	bne.n	8000586 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000556:	4b3d      	ldr	r3, [pc, #244]	; (800064c <GPIO_Init+0x198>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	4611      	mov	r1, r2
 8000566:	4a39      	ldr	r2, [pc, #228]	; (800064c <GPIO_Init+0x198>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <GPIO_Init+0x198>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7912      	ldrb	r2, [r2, #4]
 8000574:	4611      	mov	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	408a      	lsls	r2, r1
 800057a:	43d2      	mvns	r2, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a33      	ldr	r2, [pc, #204]	; (800064c <GPIO_Init+0x198>)
 8000580:	400b      	ands	r3, r1
 8000582:	60d3      	str	r3, [r2, #12]
 8000584:	e019      	b.n	80005ba <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	2b06      	cmp	r3, #6
 800058c:	d115      	bne.n	80005ba <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <GPIO_Init+0x198>)
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	7912      	ldrb	r2, [r2, #4]
 8000596:	4611      	mov	r1, r2
 8000598:	2201      	movs	r2, #1
 800059a:	408a      	lsls	r2, r1
 800059c:	4611      	mov	r1, r2
 800059e:	4a2b      	ldr	r2, [pc, #172]	; (800064c <GPIO_Init+0x198>)
 80005a0:	430b      	orrs	r3, r1
 80005a2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <GPIO_Init+0x198>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a25      	ldr	r2, [pc, #148]	; (800064c <GPIO_Init+0x198>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	f003 0303 	and.w	r3, r3, #3
 80005ca:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <GPIO_Init+0x19c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d04e      	beq.n	8000674 <GPIO_Init+0x1c0>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <GPIO_Init+0x1a0>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d032      	beq.n	8000646 <GPIO_Init+0x192>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <GPIO_Init+0x1a4>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d02b      	beq.n	8000642 <GPIO_Init+0x18e>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <GPIO_Init+0x1a8>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d024      	beq.n	800063e <GPIO_Init+0x18a>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a19      	ldr	r2, [pc, #100]	; (8000660 <GPIO_Init+0x1ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d01d      	beq.n	800063a <GPIO_Init+0x186>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <GPIO_Init+0x1b0>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d016      	beq.n	8000636 <GPIO_Init+0x182>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a16      	ldr	r2, [pc, #88]	; (8000668 <GPIO_Init+0x1b4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d00f      	beq.n	8000632 <GPIO_Init+0x17e>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <GPIO_Init+0x1b8>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d008      	beq.n	800062e <GPIO_Init+0x17a>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <GPIO_Init+0x1bc>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d101      	bne.n	800062a <GPIO_Init+0x176>
 8000626:	2308      	movs	r3, #8
 8000628:	e025      	b.n	8000676 <GPIO_Init+0x1c2>
 800062a:	2300      	movs	r3, #0
 800062c:	e023      	b.n	8000676 <GPIO_Init+0x1c2>
 800062e:	2307      	movs	r3, #7
 8000630:	e021      	b.n	8000676 <GPIO_Init+0x1c2>
 8000632:	2306      	movs	r3, #6
 8000634:	e01f      	b.n	8000676 <GPIO_Init+0x1c2>
 8000636:	2305      	movs	r3, #5
 8000638:	e01d      	b.n	8000676 <GPIO_Init+0x1c2>
 800063a:	2304      	movs	r3, #4
 800063c:	e01b      	b.n	8000676 <GPIO_Init+0x1c2>
 800063e:	2303      	movs	r3, #3
 8000640:	e019      	b.n	8000676 <GPIO_Init+0x1c2>
 8000642:	2302      	movs	r3, #2
 8000644:	e017      	b.n	8000676 <GPIO_Init+0x1c2>
 8000646:	2301      	movs	r3, #1
 8000648:	e015      	b.n	8000676 <GPIO_Init+0x1c2>
 800064a:	bf00      	nop
 800064c:	40013c00 	.word	0x40013c00
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40021000 	.word	0x40021000
 8000664:	40021400 	.word	0x40021400
 8000668:	40021800 	.word	0x40021800
 800066c:	40021c00 	.word	0x40021c00
 8000670:	40022000 	.word	0x40022000
 8000674:	2300      	movs	r3, #0
 8000676:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000678:	4b59      	ldr	r3, [pc, #356]	; (80007e0 <GPIO_Init+0x32c>)
 800067a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067c:	4a58      	ldr	r2, [pc, #352]	; (80007e0 <GPIO_Init+0x32c>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000684:	7c7a      	ldrb	r2, [r7, #17]
 8000686:	7cbb      	ldrb	r3, [r7, #18]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	fa02 f103 	lsl.w	r1, r2, r3
 800068e:	4a55      	ldr	r2, [pc, #340]	; (80007e4 <GPIO_Init+0x330>)
 8000690:	7cfb      	ldrb	r3, [r7, #19]
 8000692:	3302      	adds	r3, #2
 8000694:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000698:	4b53      	ldr	r3, [pc, #332]	; (80007e8 <GPIO_Init+0x334>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7912      	ldrb	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	408a      	lsls	r2, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a4f      	ldr	r2, [pc, #316]	; (80007e8 <GPIO_Init+0x334>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	799b      	ldrb	r3, [r3, #6]
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	2103      	movs	r1, #3
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4619      	mov	r1, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	400a      	ands	r2, r1
 80006dc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6899      	ldr	r1, [r3, #8]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	79db      	ldrb	r3, [r3, #7]
 80006f2:	461a      	mov	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68da      	ldr	r2, [r3, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2103      	movs	r1, #3
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68d9      	ldr	r1, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	430a      	orrs	r2, r1
 800072c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7a1b      	ldrb	r3, [r3, #8]
 8000732:	461a      	mov	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	4619      	mov	r1, r3
 800074a:	2301      	movs	r3, #1
 800074c:	408b      	lsls	r3, r1
 800074e:	43db      	mvns	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	400a      	ands	r2, r1
 8000758:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6859      	ldr	r1, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	430a      	orrs	r2, r1
 8000768:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	795b      	ldrb	r3, [r3, #5]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d131      	bne.n	80007d6 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	08db      	lsrs	r3, r3, #3
 8000778:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	7c3a      	ldrb	r2, [r7, #16]
 800078a:	3208      	adds	r2, #8
 800078c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	220f      	movs	r2, #15
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	7c3a      	ldrb	r2, [r7, #16]
 80007a4:	4001      	ands	r1, r0
 80007a6:	3208      	adds	r2, #8
 80007a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	7c3a      	ldrb	r2, [r7, #16]
 80007b2:	3208      	adds	r2, #8
 80007b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7a5b      	ldrb	r3, [r3, #9]
 80007bc:	461a      	mov	r2, r3
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	7c3a      	ldrb	r2, [r7, #16]
 80007ce:	4301      	orrs	r1, r0
 80007d0:	3208      	adds	r2, #8
 80007d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40013800 	.word	0x40013800
 80007e8:	40013c00 	.word	0x40013c00

080007ec <I2C_ExecuteAddressPhaseWrite>:
}



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000806:	78fa      	ldrb	r2, [r7, #3]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	611a      	str	r2, [r3, #16]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000832:	78fa      	ldrb	r2, [r7, #3]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	611a      	str	r2, [r3, #16]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b00      	cmp	r3, #0
 8000858:	d01f      	beq.n	800089a <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7f1b      	ldrb	r3, [r3, #28]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d112      	bne.n	8000888 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6a1b      	ldr	r3, [r3, #32]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d11f      	bne.n	80008aa <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f9c3 	bl	8000bfc <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000886:	e010      	b.n	80008aa <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	60fb      	str	r3, [r7, #12]
}
 8000898:	e007      	b.n	80008aa <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	60fb      	str	r3, [r7, #12]
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
	pI2Cx->CR1 &= ~( 1 << I2C_CR1_STOP);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	601a      	str	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <I2C_SlaveEnableDisableCallbackEvents>:


 void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
 {
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == ENABLE)
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d112      	bne.n	8000916 <I2C_SlaveEnableDisableCallbackEvents+0x38>
	 {
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }

 }
 8000914:	e011      	b.n	800093a <I2C_SlaveEnableDisableCallbackEvents+0x5c>
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	605a      	str	r2, [r3, #4]
 }
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d106      	bne.n	8000966 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f043 0201 	orr.w	r2, r3, #1
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000964:	e005      	b.n	8000972 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f023 0201 	bic.w	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d11f      	bne.n	80009d2 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <I2C_PeriClockControl+0x60>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <I2C_PeriClockControl+0x64>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <I2C_PeriClockControl+0x64>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 80009a6:	e014      	b.n	80009d2 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <I2C_PeriClockControl+0x68>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d106      	bne.n	80009be <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <I2C_PeriClockControl+0x64>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <I2C_PeriClockControl+0x64>)
 80009b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009bc:	e009      	b.n	80009d2 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <I2C_PeriClockControl+0x6c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d105      	bne.n	80009d2 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <I2C_PeriClockControl+0x64>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <I2C_PeriClockControl+0x64>)
 80009cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40005800 	.word	0x40005800
 80009ec:	40005c00 	.word	0x40005c00

080009f0 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScalar[8] ={2,4,8,16,64,128,256,512};
uint16_t APB_PreScalar[4] ={2,4,8,16};

uint32_t RCC_GetPCLK1Value(void){
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk,ahpb,apb;

	uint8_t clksrc,temp;

	clksrc = ((((RCC_RegDef_t*)0x40023800U)->CFGR >> 2) & 0x3);
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <RCC_GetPCLK1Value+0x94>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	72fb      	strb	r3, [r7, #11]
	if (clksrc == 0){
 8000a04:	7afb      	ldrb	r3, [r7, #11]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <RCC_GetPCLK1Value+0x98>)
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e004      	b.n	8000a1a <RCC_GetPCLK1Value+0x2a>
	}else if (clksrc == 2){
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d101      	bne.n	8000a1a <RCC_GetPCLK1Value+0x2a>
		SystemClk = 8000000;
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <RCC_GetPCLK1Value+0x9c>)
 8000a18:	617b      	str	r3, [r7, #20]
	}else if(clksrc == 3){
//		SystemClk = RCC_getPLLOutputClock();
	}

	temp =  ((((RCC_RegDef_t*)0x40023800U)->CFGR >> 4) & 0xF);
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <RCC_GetPCLK1Value+0x94>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	091b      	lsrs	r3, r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	72bb      	strb	r3, [r7, #10]
	if(temp<8){
 8000a28:	7abb      	ldrb	r3, [r7, #10]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	d802      	bhi.n	8000a34 <RCC_GetPCLK1Value+0x44>
		ahpb=1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	e005      	b.n	8000a40 <RCC_GetPCLK1Value+0x50>
	}else{
		ahpb = AHB_PreScalar[temp-8];
 8000a34:	7abb      	ldrb	r3, [r7, #10]
 8000a36:	3b08      	subs	r3, #8
 8000a38:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <RCC_GetPCLK1Value+0xa0>)
 8000a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a3e:	613b      	str	r3, [r7, #16]
	}

	temp =  ((((RCC_RegDef_t*)0x40023800U)->CFGR >> 10) & 0x3);
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <RCC_GetPCLK1Value+0x94>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	0a9b      	lsrs	r3, r3, #10
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	72bb      	strb	r3, [r7, #10]
	if(temp<4){
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d802      	bhi.n	8000a5a <RCC_GetPCLK1Value+0x6a>
		apb=1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e005      	b.n	8000a66 <RCC_GetPCLK1Value+0x76>
	}else{
		apb = APB_PreScalar[temp-4];
 8000a5a:	7abb      	ldrb	r3, [r7, #10]
 8000a5c:	3b04      	subs	r3, #4
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <RCC_GetPCLK1Value+0xa4>)
 8000a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a64:	60fb      	str	r3, [r7, #12]
	}

	pclk1 = (SystemClk/ahpb)/apb;
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000a76:	687b      	ldr	r3, [r7, #4]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	371c      	adds	r7, #28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40023800 	.word	0x40023800
 8000a88:	00f42400 	.word	0x00f42400
 8000a8c:	007a1200 	.word	0x007a1200
 8000a90:	20000020 	.word	0x20000020
 8000a94:	20000030 	.word	0x20000030

08000a98 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff68 	bl	8000980 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7a5b      	ldrb	r3, [r3, #9]
 8000ab4:	029b      	lsls	r3, r3, #10
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000aca:	f7ff ff91 	bl	80009f0 <RCC_GetPCLK1Value>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a47      	ldr	r2, [pc, #284]	; (8000bf0 <I2C_Init+0x158>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	0c9b      	lsrs	r3, r3, #18
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ae8:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7a1b      	ldrb	r3, [r3, #8]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	461a      	mov	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a36      	ldr	r2, [pc, #216]	; (8000bf4 <I2C_Init+0x15c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d80f      	bhi.n	8000b3e <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000b1e:	f7ff ff67 	bl	80009f0 <RCC_GetPCLK1Value>
 8000b22:	4602      	mov	r2, r0
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000b30:	897b      	ldrh	r3, [r7, #10]
 8000b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e02d      	b.n	8000b9a <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b44:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7a9b      	ldrb	r3, [r3, #10]
 8000b4a:	039b      	lsls	r3, r3, #14
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7a9b      	ldrb	r3, [r3, #10]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10b      	bne.n	8000b74 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000b5c:	f7ff ff48 	bl	80009f0 <RCC_GetPCLK1Value>
 8000b60:	4601      	mov	r1, r0
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b70:	817b      	strh	r3, [r7, #10]
 8000b72:	e00c      	b.n	8000b8e <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000b74:	f7ff ff3c 	bl	80009f0 <RCC_GetPCLK1Value>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	009a      	lsls	r2, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b8c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000b8e:	897b      	ldrh	r3, [r7, #10]
 8000b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <I2C_Init+0x15c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d809      	bhi.n	8000bc0 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000bac:	f7ff ff20 	bl	80009f0 <RCC_GetPCLK1Value>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <I2C_Init+0x158>)
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	0c9b      	lsrs	r3, r3, #18
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e00d      	b.n	8000bdc <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000bc0:	f7ff ff16 	bl	80009f0 <RCC_GetPCLK1Value>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <I2C_Init+0x160>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	09db      	lsrs	r3, r3, #7
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000be6:	621a      	str	r2, [r3, #32]

}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	000186a0 	.word	0x000186a0
 8000bf8:	00044b83 	.word	0x00044b83

08000bfc <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d106      	bne.n	8000c1c <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000c1a:	e005      	b.n	8000c28 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <I2C_IRQInterruptConfig>:
 *
 * @Note              -

 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d133      	bne.n	8000cb2 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b1f      	cmp	r3, #31
 8000c4e:	d80a      	bhi.n	8000c66 <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000c50:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <I2C_IRQInterruptConfig+0xf4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <I2C_IRQInterruptConfig+0xf4>)
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000c64:	e059      	b.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b1f      	cmp	r3, #31
 8000c6a:	d90f      	bls.n	8000c8c <I2C_IRQInterruptConfig+0x58>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c70:	d80c      	bhi.n	8000c8c <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <I2C_IRQInterruptConfig+0xf8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	f002 021f 	and.w	r2, r2, #31
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <I2C_IRQInterruptConfig+0xf8>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e046      	b.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c90:	d943      	bls.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b5f      	cmp	r3, #95	; 0x5f
 8000c96:	d840      	bhi.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <I2C_IRQInterruptConfig+0xfc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	79fa      	ldrb	r2, [r7, #7]
 8000c9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <I2C_IRQInterruptConfig+0xfc>)
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	e033      	b.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b1f      	cmp	r3, #31
 8000cb6:	d80a      	bhi.n	8000cce <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <I2C_IRQInterruptConfig+0x100>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <I2C_IRQInterruptConfig+0x100>)
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	e025      	b.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b1f      	cmp	r3, #31
 8000cd2:	d90f      	bls.n	8000cf4 <I2C_IRQInterruptConfig+0xc0>
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd8:	d80c      	bhi.n	8000cf4 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <I2C_IRQInterruptConfig+0x104>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	f002 021f 	and.w	r2, r2, #31
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	4611      	mov	r1, r2
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <I2C_IRQInterruptConfig+0x104>)
 8000cee:	430b      	orrs	r3, r1
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e012      	b.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d90f      	bls.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b5f      	cmp	r3, #95	; 0x5f
 8000cfe:	d80c      	bhi.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <I2C_IRQInterruptConfig+0x108>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	79fa      	ldrb	r2, [r7, #7]
 8000d06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	4611      	mov	r1, r2
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <I2C_IRQInterruptConfig+0x108>)
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	e7ff      	b.n	8000d1a <I2C_IRQInterruptConfig+0xe6>
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000e104 	.word	0xe000e104
 8000d30:	e000e10c 	.word	0xe000e10c
 8000d34:	e000e180 	.word	0xe000e180
 8000d38:	e000e184 	.word	0xe000e184
 8000d3c:	e000e18c 	.word	0xe000e18c

08000d40 <I2C_MasterHandleTXEInterrupt>:

	return busystate;
}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00f      	beq.n	8000d70 <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	60da      	str	r2, [r3, #12]

	}

}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10b      	bne.n	8000da4 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	691a      	ldr	r2, [r3, #16]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	1e5a      	subs	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d91a      	bls.n	8000de2 <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d105      	bne.n	8000dc0 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff1e 	bl	8000bfc <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d110      	bne.n	8000e0c <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d104      	bne.n	8000dfe <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fd5a 	bl	80008b2 <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f808 	bl	8000e14 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8000e04:	2101      	movs	r1, #1
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fa56 	bl	80002b8 <I2C_ApplicationEventCallback>
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <I2C_CloseReceiveData>:


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e2a:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e3a:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7a5b      	ldrb	r3, [r3, #9]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d105      	bne.n	8000e68 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff feca 	bl	8000bfc <I2C_ManageAcking>
	}

}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e86:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e96:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <I2C_SlaveSendData>:


void I2C_SlaveSendData(I2C_RegDef_t *pI2C,uint8_t data)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000ec2:	78fa      	ldrb	r2, [r7, #3]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	611a      	str	r2, [r3, #16]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    return (uint8_t) pI2C->DR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	b2db      	uxtb	r3, r3
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <I2C_EV_IRQHandling>:



void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITEVTEN) ;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f00:	617b      	str	r3, [r7, #20]
	temp2   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITBUFEN) ;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f0c:	613b      	str	r3, [r7, #16]

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
	//1. Handle For interrupt generated by SB event
	//	Note : SB flag is only applicable in Master mode
	if(temp1 && temp3)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d01b      	beq.n	8000f58 <I2C_EV_IRQHandling+0x6a>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d018      	beq.n	8000f58 <I2C_EV_IRQHandling+0x6a>
	{
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7f1b      	ldrb	r3, [r3, #28]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d108      	bne.n	8000f40 <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7f5b      	ldrb	r3, [r3, #29]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4610      	mov	r0, r2
 8000f3a:	f7ff fc57 	bl	80007ec <I2C_ExecuteAddressPhaseWrite>
 8000f3e:	e00b      	b.n	8000f58 <I2C_EV_IRQHandling+0x6a>
		}else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7f1b      	ldrb	r3, [r3, #28]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d107      	bne.n	8000f58 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7f5b      	ldrb	r3, [r3, #29]
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f7ff fc60 	bl	8000818 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_ADDR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <I2C_EV_IRQHandling+0x88>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <I2C_EV_IRQHandling+0x88>
	{
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fc67 	bl	8000844 <I2C_ClearADDRFlag>
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_BTF);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d022      	beq.n	8000fce <I2C_EV_IRQHandling+0xe0>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d01f      	beq.n	8000fce <I2C_EV_IRQHandling+0xe0>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7f1b      	ldrb	r3, [r3, #28]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d11b      	bne.n	8000fce <I2C_EV_IRQHandling+0xe0>
		{
			//make sure that TXE is also set .
			if(pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE) )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d014      	beq.n	8000fce <I2C_EV_IRQHandling+0xe0>
			{
				//BTF, TXE = 1
				if(pI2CHandle->TxLen == 0 )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d110      	bne.n	8000fce <I2C_EV_IRQHandling+0xe0>
				{
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d104      	bne.n	8000fc0 <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fc79 	bl	80008b2 <I2C_GenerateStopCondition>

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff55 	bl	8000e70 <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff f975 	bl	80002b8 <I2C_ApplicationEventCallback>
		{
			;
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_STOPF);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	//The below code block will not be executed by the master since STOPF will not set in master mode
	if(temp1 && temp3)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00c      	beq.n	8000ffa <I2C_EV_IRQHandling+0x10c>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d009      	beq.n	8000ffa <I2C_EV_IRQHandling+0x10c>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )

		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff f95f 	bl	80002b8 <I2C_ApplicationEventCallback>
	}


	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001004:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01f      	beq.n	800104c <I2C_EV_IRQHandling+0x15e>
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d01c      	beq.n	800104c <I2C_EV_IRQHandling+0x15e>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d019      	beq.n	800104c <I2C_EV_IRQHandling+0x15e>
	{
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <I2C_EV_IRQHandling+0x148>
		{
			//TXE flag is set
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7f1b      	ldrb	r3, [r3, #28]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d10e      	bne.n	800104c <I2C_EV_IRQHandling+0x15e>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fe86 	bl	8000d40 <I2C_MasterHandleTXEInterrupt>
 8001034:	e00a      	b.n	800104c <I2C_EV_IRQHandling+0x15e>
			}
		}else
		{
			//slave
			//make sure that the slave is really in transmitter mode
		    if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <I2C_EV_IRQHandling+0x15e>
		    {
		    	I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 8001044:	2108      	movs	r1, #8
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff f936 	bl	80002b8 <I2C_ApplicationEventCallback>
		    }
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_RXNE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01f      	beq.n	800109e <I2C_EV_IRQHandling+0x1b0>
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01c      	beq.n	800109e <I2C_EV_IRQHandling+0x1b0>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d019      	beq.n	800109e <I2C_EV_IRQHandling+0x1b0>
	{
		//check device mode .
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <I2C_EV_IRQHandling+0x19a>
		{
			//The device is master

			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7f1b      	ldrb	r3, [r3, #28]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10e      	bne.n	800109e <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fe7b 	bl	8000d7c <I2C_MasterHandleRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
			}
		}
	}
}
 8001086:	e00a      	b.n	800109e <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA)))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 8001096:	2109      	movs	r1, #9
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff f90d 	bl	80002b8 <I2C_ApplicationEventCallback>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <I2C_ER_IRQHandling>:
						#define I2C_ERROR_TIMEOUT 7

 */

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b8:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c4:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00e      	beq.n	80010ea <I2C_ER_IRQHandling+0x44>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e0:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80010e2:	2103      	movs	r1, #3
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff f8e7 	bl	80002b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f4:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00e      	beq.n	800111a <I2C_ER_IRQHandling+0x74>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00b      	beq.n	800111a <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695a      	ldr	r2, [r3, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001110:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8001112:	2104      	movs	r1, #4
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f8cf 	bl	80002b8 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001124:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00e      	beq.n	800114a <I2C_ER_IRQHandling+0xa4>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001140:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001142:	2105      	movs	r1, #5
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f8b7 	bl	80002b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001154:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00e      	beq.n	800117a <I2C_ER_IRQHandling+0xd4>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001170:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001172:	2106      	movs	r1, #6
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff f89f 	bl	80002b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001184:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00e      	beq.n	80011aa <I2C_ER_IRQHandling+0x104>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011a0:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 80011a2:	2107      	movs	r1, #7
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff f887 	bl	80002b8 <I2C_ApplicationEventCallback>
	}

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <__libc_init_array>:
 80011b4:	b570      	push	{r4, r5, r6, lr}
 80011b6:	4d0d      	ldr	r5, [pc, #52]	; (80011ec <__libc_init_array+0x38>)
 80011b8:	4c0d      	ldr	r4, [pc, #52]	; (80011f0 <__libc_init_array+0x3c>)
 80011ba:	1b64      	subs	r4, r4, r5
 80011bc:	10a4      	asrs	r4, r4, #2
 80011be:	2600      	movs	r6, #0
 80011c0:	42a6      	cmp	r6, r4
 80011c2:	d109      	bne.n	80011d8 <__libc_init_array+0x24>
 80011c4:	4d0b      	ldr	r5, [pc, #44]	; (80011f4 <__libc_init_array+0x40>)
 80011c6:	4c0c      	ldr	r4, [pc, #48]	; (80011f8 <__libc_init_array+0x44>)
 80011c8:	f000 f818 	bl	80011fc <_init>
 80011cc:	1b64      	subs	r4, r4, r5
 80011ce:	10a4      	asrs	r4, r4, #2
 80011d0:	2600      	movs	r6, #0
 80011d2:	42a6      	cmp	r6, r4
 80011d4:	d105      	bne.n	80011e2 <__libc_init_array+0x2e>
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011dc:	4798      	blx	r3
 80011de:	3601      	adds	r6, #1
 80011e0:	e7ee      	b.n	80011c0 <__libc_init_array+0xc>
 80011e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011e6:	4798      	blx	r3
 80011e8:	3601      	adds	r6, #1
 80011ea:	e7f2      	b.n	80011d2 <__libc_init_array+0x1e>
 80011ec:	08001214 	.word	0x08001214
 80011f0:	08001214 	.word	0x08001214
 80011f4:	08001214 	.word	0x08001214
 80011f8:	08001218 	.word	0x08001218

080011fc <_init>:
 80011fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fe:	bf00      	nop
 8001200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001202:	bc08      	pop	{r3}
 8001204:	469e      	mov	lr, r3
 8001206:	4770      	bx	lr

08001208 <_fini>:
 8001208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120a:	bf00      	nop
 800120c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800120e:	bc08      	pop	{r3}
 8001210:	469e      	mov	lr, r3
 8001212:	4770      	bx	lr
