
Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001024  08001024  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001024  08001024  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001024  08001024  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001028  08001028  00011028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800102c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a85  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000319  00000000  00000000  00020b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000118  00000000  00000000  00020e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000bf  00000000  00000000  00020f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c95  00000000  00000000  00021047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000013f2  00000000  00000000  00023cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000097cb  00000000  00000000  000250ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000009d4  00000000  00000000  0002e89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0002f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fdc 	.word	0x08000fdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000fdc 	.word	0x08000fdc

080001c8 <main>:

#include <stdint.h>
#include<stdio.h>

int main(void)
{	uint32_t *address_RCC = (uint32_t*)(0x40023830);
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b092      	sub	sp, #72	; 0x48
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4b8f      	ldr	r3, [pc, #572]	; (800040c <main+0x244>)
 80001d0:	617b      	str	r3, [r7, #20]
	uint32_t *address_Mode =(uint32_t*)(0x40021000);
 80001d2:	4b8f      	ldr	r3, [pc, #572]	; (8000410 <main+0x248>)
 80001d4:	613b      	str	r3, [r7, #16]
	uint32_t *address_OUTPUT=(uint32_t*)(0x40021000+0x14);
 80001d6:	4b8f      	ldr	r3, [pc, #572]	; (8000414 <main+0x24c>)
 80001d8:	60fb      	str	r3, [r7, #12]
	uint32_t *address_input =(uint32_t*)(0x40021000+0x10);
 80001da:	4b8f      	ldr	r3, [pc, #572]	; (8000418 <main+0x250>)
 80001dc:	60bb      	str	r3, [r7, #8]
	uint32_t *address_pullup=(uint32_t*)(0x40021000+0x0C);
 80001de:	4b8f      	ldr	r3, [pc, #572]	; (800041c <main+0x254>)
 80001e0:	607b      	str	r3, [r7, #4]

	// Enable the clock
	*address_RCC |= (1<<4);
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0210 	orr.w	r2, r3, #16
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	601a      	str	r2, [r3, #0]
	//Setting the Mode
	*address_Mode &= ~(0xFF<<14);
 80001ee:	693b      	ldr	r3, [r7, #16]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f423 127f 	bic.w	r2, r3, #4177920	; 0x3fc000
 80001f6:	693b      	ldr	r3, [r7, #16]
 80001f8:	601a      	str	r2, [r3, #0]
	*address_Mode |= (0x55<<14);
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f443 12aa 	orr.w	r2, r3, #1392640	; 0x154000
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	601a      	str	r2, [r3, #0]
	*address_Mode &= ~(0x3F<<22);
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f023 627c 	bic.w	r2, r3, #264241152	; 0xfc00000
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	601a      	str	r2, [r3, #0]

	//Enable the pull up Register
	*address_pullup |= (0X15<<22);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 62a8 	orr.w	r2, r3, #88080384	; 0x5400000
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]

	//Set Row pins to OUTPUT

    /* Loop forever */
	while(1){
		*address_OUTPUT |= (0X0F<<7);
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f443 62f0 	orr.w	r2, r3, #1920	; 0x780
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	601a      	str	r2, [r3, #0]
		*address_OUTPUT &= ~(1<<7);
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	601a      	str	r2, [r3, #0]
		if ( !(*address_input & (1<<11)) ){
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10c      	bne.n	800025c <main+0x94>
			for(int i =0;i<500000 ;i++);
 8000242:	2300      	movs	r3, #0
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
 8000246:	e002      	b.n	800024e <main+0x86>
 8000248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800024a:	3301      	adds	r3, #1
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
 800024e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000250:	4a73      	ldr	r2, [pc, #460]	; (8000420 <main+0x258>)
 8000252:	4293      	cmp	r3, r2
 8000254:	ddf8      	ble.n	8000248 <main+0x80>
			printf("1 \n");
 8000256:	4873      	ldr	r0, [pc, #460]	; (8000424 <main+0x25c>)
 8000258:	f000 fb2a 	bl	80008b0 <puts>
		}
		if ( !(*address_input & (1<<12)) ){
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000264:	2b00      	cmp	r3, #0
 8000266:	d10c      	bne.n	8000282 <main+0xba>
			for(int i =0;i<500000 ;i++);
 8000268:	2300      	movs	r3, #0
 800026a:	643b      	str	r3, [r7, #64]	; 0x40
 800026c:	e002      	b.n	8000274 <main+0xac>
 800026e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000270:	3301      	adds	r3, #1
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
 8000274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000276:	4a6a      	ldr	r2, [pc, #424]	; (8000420 <main+0x258>)
 8000278:	4293      	cmp	r3, r2
 800027a:	ddf8      	ble.n	800026e <main+0xa6>
			printf("2 \n");
 800027c:	486a      	ldr	r0, [pc, #424]	; (8000428 <main+0x260>)
 800027e:	f000 fb17 	bl	80008b0 <puts>
		}
		if ( !(*address_input & (1<<13)) ){
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800028a:	2b00      	cmp	r3, #0
 800028c:	d10c      	bne.n	80002a8 <main+0xe0>
			for(int i =0;i<500000 ;i++);
 800028e:	2300      	movs	r3, #0
 8000290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000292:	e002      	b.n	800029a <main+0xd2>
 8000294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000296:	3301      	adds	r3, #1
 8000298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800029a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800029c:	4a60      	ldr	r2, [pc, #384]	; (8000420 <main+0x258>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	ddf8      	ble.n	8000294 <main+0xcc>
			printf("3 \n");
 80002a2:	4862      	ldr	r0, [pc, #392]	; (800042c <main+0x264>)
 80002a4:	f000 fb04 	bl	80008b0 <puts>
		}
		*address_OUTPUT |= (0X0F<<7);
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f443 62f0 	orr.w	r2, r3, #1920	; 0x780
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	601a      	str	r2, [r3, #0]
		*address_OUTPUT &= ~(1<<8);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]
		if (! (*address_input & (1<<11)) ){
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d10c      	bne.n	80002e6 <main+0x11e>
			for(int i =0;i<500000 ;i++);
 80002cc:	2300      	movs	r3, #0
 80002ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80002d0:	e002      	b.n	80002d8 <main+0x110>
 80002d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002d4:	3301      	adds	r3, #1
 80002d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80002d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002da:	4a51      	ldr	r2, [pc, #324]	; (8000420 <main+0x258>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	ddf8      	ble.n	80002d2 <main+0x10a>
			printf("4 \n");
 80002e0:	4853      	ldr	r0, [pc, #332]	; (8000430 <main+0x268>)
 80002e2:	f000 fae5 	bl	80008b0 <puts>
		}
		if (! (*address_input & (1<<12)) ){
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d10c      	bne.n	800030c <main+0x144>
			for(int i =0;i<500000 ;i++);
 80002f2:	2300      	movs	r3, #0
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
 80002f6:	e002      	b.n	80002fe <main+0x136>
 80002f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002fa:	3301      	adds	r3, #1
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
 80002fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000300:	4a47      	ldr	r2, [pc, #284]	; (8000420 <main+0x258>)
 8000302:	4293      	cmp	r3, r2
 8000304:	ddf8      	ble.n	80002f8 <main+0x130>
			printf("5 \n");
 8000306:	484b      	ldr	r0, [pc, #300]	; (8000434 <main+0x26c>)
 8000308:	f000 fad2 	bl	80008b0 <puts>
		}
		if (! (*address_input & (1<<13)) ){
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d10c      	bne.n	8000332 <main+0x16a>
			for(int i =0;i<500000 ;i++);
 8000318:	2300      	movs	r3, #0
 800031a:	633b      	str	r3, [r7, #48]	; 0x30
 800031c:	e002      	b.n	8000324 <main+0x15c>
 800031e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000320:	3301      	adds	r3, #1
 8000322:	633b      	str	r3, [r7, #48]	; 0x30
 8000324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000326:	4a3e      	ldr	r2, [pc, #248]	; (8000420 <main+0x258>)
 8000328:	4293      	cmp	r3, r2
 800032a:	ddf8      	ble.n	800031e <main+0x156>
			printf("6 \n");
 800032c:	4842      	ldr	r0, [pc, #264]	; (8000438 <main+0x270>)
 800032e:	f000 fabf 	bl	80008b0 <puts>
		}
		*address_OUTPUT |= (0X0F<<7);
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f443 62f0 	orr.w	r2, r3, #1920	; 0x780
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	601a      	str	r2, [r3, #0]
		*address_OUTPUT &= ~(1<<9);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]
		if (! (*address_input & (1<<11)) ){
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000352:	2b00      	cmp	r3, #0
 8000354:	d10c      	bne.n	8000370 <main+0x1a8>
			for(int i =0;i<500000 ;i++);
 8000356:	2300      	movs	r3, #0
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800035a:	e002      	b.n	8000362 <main+0x19a>
 800035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800035e:	3301      	adds	r3, #1
 8000360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000364:	4a2e      	ldr	r2, [pc, #184]	; (8000420 <main+0x258>)
 8000366:	4293      	cmp	r3, r2
 8000368:	ddf8      	ble.n	800035c <main+0x194>
			printf("7 \n");
 800036a:	4834      	ldr	r0, [pc, #208]	; (800043c <main+0x274>)
 800036c:	f000 faa0 	bl	80008b0 <puts>
		}
		if (! (*address_input & (1<<12)) ){
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10c      	bne.n	8000396 <main+0x1ce>
			for(int i =0;i<500000 ;i++);
 800037c:	2300      	movs	r3, #0
 800037e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000380:	e002      	b.n	8000388 <main+0x1c0>
 8000382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000384:	3301      	adds	r3, #1
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28
 8000388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038a:	4a25      	ldr	r2, [pc, #148]	; (8000420 <main+0x258>)
 800038c:	4293      	cmp	r3, r2
 800038e:	ddf8      	ble.n	8000382 <main+0x1ba>
			printf("8 \n");
 8000390:	482b      	ldr	r0, [pc, #172]	; (8000440 <main+0x278>)
 8000392:	f000 fa8d 	bl	80008b0 <puts>
		}
		if (! (*address_input & (1<<13)) ){
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d10c      	bne.n	80003bc <main+0x1f4>
			for(int i =0;i<500000 ;i++);
 80003a2:	2300      	movs	r3, #0
 80003a4:	627b      	str	r3, [r7, #36]	; 0x24
 80003a6:	e002      	b.n	80003ae <main+0x1e6>
 80003a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003aa:	3301      	adds	r3, #1
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
 80003ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <main+0x258>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	ddf8      	ble.n	80003a8 <main+0x1e0>
			printf("9 \n");
 80003b6:	4823      	ldr	r0, [pc, #140]	; (8000444 <main+0x27c>)
 80003b8:	f000 fa7a 	bl	80008b0 <puts>
		}
		*address_OUTPUT |= (0X0F<<7);
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f443 62f0 	orr.w	r2, r3, #1920	; 0x780
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	601a      	str	r2, [r3, #0]
		*address_OUTPUT &= ~(1<<10);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]
		if (! (*address_input & (1<<11)) ){
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d10c      	bne.n	80003fa <main+0x232>
			for(int i =0;i<500000 ;i++);
 80003e0:	2300      	movs	r3, #0
 80003e2:	623b      	str	r3, [r7, #32]
 80003e4:	e002      	b.n	80003ec <main+0x224>
 80003e6:	6a3b      	ldr	r3, [r7, #32]
 80003e8:	3301      	adds	r3, #1
 80003ea:	623b      	str	r3, [r7, #32]
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <main+0x258>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	ddf8      	ble.n	80003e6 <main+0x21e>
			printf("* \n");
 80003f4:	4814      	ldr	r0, [pc, #80]	; (8000448 <main+0x280>)
 80003f6:	f000 fa5b 	bl	80008b0 <puts>
		}
		if (! (*address_input & (1<<12)) ){
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000402:	2b00      	cmp	r3, #0
 8000404:	d12c      	bne.n	8000460 <main+0x298>
			for(int i =0;i<500000 ;i++);
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
 800040a:	e022      	b.n	8000452 <main+0x28a>
 800040c:	40023830 	.word	0x40023830
 8000410:	40021000 	.word	0x40021000
 8000414:	40021014 	.word	0x40021014
 8000418:	40021010 	.word	0x40021010
 800041c:	4002100c 	.word	0x4002100c
 8000420:	0007a11f 	.word	0x0007a11f
 8000424:	08000ff4 	.word	0x08000ff4
 8000428:	08000ff8 	.word	0x08000ff8
 800042c:	08000ffc 	.word	0x08000ffc
 8000430:	08001000 	.word	0x08001000
 8000434:	08001004 	.word	0x08001004
 8000438:	08001008 	.word	0x08001008
 800043c:	0800100c 	.word	0x0800100c
 8000440:	08001010 	.word	0x08001010
 8000444:	08001014 	.word	0x08001014
 8000448:	08001018 	.word	0x08001018
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	3301      	adds	r3, #1
 8000450:	61fb      	str	r3, [r7, #28]
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <main+0x2c4>)
 8000456:	4293      	cmp	r3, r2
 8000458:	ddf8      	ble.n	800044c <main+0x284>
			printf("0 \n");
 800045a:	480d      	ldr	r0, [pc, #52]	; (8000490 <main+0x2c8>)
 800045c:	f000 fa28 	bl	80008b0 <puts>
		}
		if (! (*address_input & (1<<13)) ){
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000468:	2b00      	cmp	r3, #0
 800046a:	f47f aed8 	bne.w	800021e <main+0x56>
			for(int i =0;i<500000 ;i++);
 800046e:	2300      	movs	r3, #0
 8000470:	61bb      	str	r3, [r7, #24]
 8000472:	e002      	b.n	800047a <main+0x2b2>
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	3301      	adds	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	4a03      	ldr	r2, [pc, #12]	; (800048c <main+0x2c4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	ddf8      	ble.n	8000474 <main+0x2ac>
			printf("# \n");
 8000482:	4804      	ldr	r0, [pc, #16]	; (8000494 <main+0x2cc>)
 8000484:	f000 fa14 	bl	80008b0 <puts>
		*address_OUTPUT |= (0X0F<<7);
 8000488:	e6c9      	b.n	800021e <main+0x56>
 800048a:	bf00      	nop
 800048c:	0007a11f 	.word	0x0007a11f
 8000490:	0800101c 	.word	0x0800101c
 8000494:	08001020 	.word	0x08001020

08000498 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <ITM_SendChar+0x48>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <ITM_SendChar+0x48>)
 80004a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <ITM_SendChar+0x4c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <ITM_SendChar+0x4c>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ba:	bf00      	nop
 80004bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f8      	beq.n	80004bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e000edfc 	.word	0xe000edfc
 80004e4:	e0000e00 	.word	0xe0000e00

080004e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e00a      	b.n	8000510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004fa:	f3af 8000 	nop.w
 80004fe:	4601      	mov	r1, r0
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	60ba      	str	r2, [r7, #8]
 8000506:	b2ca      	uxtb	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3301      	adds	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbf0      	blt.n	80004fa <_read+0x12>
  }

  return len;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b086      	sub	sp, #24
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	e009      	b.n	8000548 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ffab 	bl	8000498 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	3301      	adds	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	dbf1      	blt.n	8000534 <_write+0x12>
  }
  return len;
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <_close>:

int _close(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000582:	605a      	str	r2, [r3, #4]
  return 0;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <_isatty>:

int _isatty(int file)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <_sbrk+0x5c>)
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <_sbrk+0x60>)
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <_sbrk+0x64>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <_sbrk+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d207      	bcs.n	8000604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f4:	f000 fa8a 	bl	8000b0c <__errno>
 80005f8:	4603      	mov	r3, r0
 80005fa:	220c      	movs	r2, #12
 80005fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000602:	e009      	b.n	8000618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <_sbrk+0x64>)
 8000614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000616:	68fb      	ldr	r3, [r7, #12]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20020000 	.word	0x20020000
 8000624:	00000400 	.word	0x00000400
 8000628:	20000078 	.word	0x20000078
 800062c:	200001c8 	.word	0x200001c8

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065e:	f000 fa5b 	bl	8000b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fdb1 	bl	80001c8 <main>

08000666 <LoopForever>:

LoopForever:
  b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000674:	0800102c 	.word	0x0800102c
  ldr r2, =_sbss
 8000678:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800067c:	200001c8 	.word	0x200001c8

08000680 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC_IRQHandler>
	...

08000684 <std>:
 8000684:	2300      	movs	r3, #0
 8000686:	b510      	push	{r4, lr}
 8000688:	4604      	mov	r4, r0
 800068a:	e9c0 3300 	strd	r3, r3, [r0]
 800068e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000692:	6083      	str	r3, [r0, #8]
 8000694:	8181      	strh	r1, [r0, #12]
 8000696:	6643      	str	r3, [r0, #100]	; 0x64
 8000698:	81c2      	strh	r2, [r0, #14]
 800069a:	6183      	str	r3, [r0, #24]
 800069c:	4619      	mov	r1, r3
 800069e:	2208      	movs	r2, #8
 80006a0:	305c      	adds	r0, #92	; 0x5c
 80006a2:	f000 f9e5 	bl	8000a70 <memset>
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <std+0x58>)
 80006a8:	6263      	str	r3, [r4, #36]	; 0x24
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <std+0x5c>)
 80006ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <std+0x60>)
 80006b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <std+0x64>)
 80006b4:	6323      	str	r3, [r4, #48]	; 0x30
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <std+0x68>)
 80006b8:	6224      	str	r4, [r4, #32]
 80006ba:	429c      	cmp	r4, r3
 80006bc:	d006      	beq.n	80006cc <std+0x48>
 80006be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006c2:	4294      	cmp	r4, r2
 80006c4:	d002      	beq.n	80006cc <std+0x48>
 80006c6:	33d0      	adds	r3, #208	; 0xd0
 80006c8:	429c      	cmp	r4, r3
 80006ca:	d105      	bne.n	80006d8 <std+0x54>
 80006cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d4:	f000 ba44 	b.w	8000b60 <__retarget_lock_init_recursive>
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	080008c1 	.word	0x080008c1
 80006e0:	080008e3 	.word	0x080008e3
 80006e4:	0800091b 	.word	0x0800091b
 80006e8:	0800093f 	.word	0x0800093f
 80006ec:	2000007c 	.word	0x2000007c

080006f0 <stdio_exit_handler>:
 80006f0:	4a02      	ldr	r2, [pc, #8]	; (80006fc <stdio_exit_handler+0xc>)
 80006f2:	4903      	ldr	r1, [pc, #12]	; (8000700 <stdio_exit_handler+0x10>)
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <stdio_exit_handler+0x14>)
 80006f6:	f000 b869 	b.w	80007cc <_fwalk_sglue>
 80006fa:	bf00      	nop
 80006fc:	20000000 	.word	0x20000000
 8000700:	08000e65 	.word	0x08000e65
 8000704:	2000000c 	.word	0x2000000c

08000708 <cleanup_stdio>:
 8000708:	6841      	ldr	r1, [r0, #4]
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <cleanup_stdio+0x34>)
 800070c:	4299      	cmp	r1, r3
 800070e:	b510      	push	{r4, lr}
 8000710:	4604      	mov	r4, r0
 8000712:	d001      	beq.n	8000718 <cleanup_stdio+0x10>
 8000714:	f000 fba6 	bl	8000e64 <_fflush_r>
 8000718:	68a1      	ldr	r1, [r4, #8]
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <cleanup_stdio+0x38>)
 800071c:	4299      	cmp	r1, r3
 800071e:	d002      	beq.n	8000726 <cleanup_stdio+0x1e>
 8000720:	4620      	mov	r0, r4
 8000722:	f000 fb9f 	bl	8000e64 <_fflush_r>
 8000726:	68e1      	ldr	r1, [r4, #12]
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <cleanup_stdio+0x3c>)
 800072a:	4299      	cmp	r1, r3
 800072c:	d004      	beq.n	8000738 <cleanup_stdio+0x30>
 800072e:	4620      	mov	r0, r4
 8000730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000734:	f000 bb96 	b.w	8000e64 <_fflush_r>
 8000738:	bd10      	pop	{r4, pc}
 800073a:	bf00      	nop
 800073c:	2000007c 	.word	0x2000007c
 8000740:	200000e4 	.word	0x200000e4
 8000744:	2000014c 	.word	0x2000014c

08000748 <global_stdio_init.part.0>:
 8000748:	b510      	push	{r4, lr}
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <global_stdio_init.part.0+0x30>)
 800074c:	4c0b      	ldr	r4, [pc, #44]	; (800077c <global_stdio_init.part.0+0x34>)
 800074e:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <global_stdio_init.part.0+0x38>)
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	4620      	mov	r0, r4
 8000754:	2200      	movs	r2, #0
 8000756:	2104      	movs	r1, #4
 8000758:	f7ff ff94 	bl	8000684 <std>
 800075c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000760:	2201      	movs	r2, #1
 8000762:	2109      	movs	r1, #9
 8000764:	f7ff ff8e 	bl	8000684 <std>
 8000768:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800076c:	2202      	movs	r2, #2
 800076e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000772:	2112      	movs	r1, #18
 8000774:	f7ff bf86 	b.w	8000684 <std>
 8000778:	200001b4 	.word	0x200001b4
 800077c:	2000007c 	.word	0x2000007c
 8000780:	080006f1 	.word	0x080006f1

08000784 <__sfp_lock_acquire>:
 8000784:	4801      	ldr	r0, [pc, #4]	; (800078c <__sfp_lock_acquire+0x8>)
 8000786:	f000 b9ec 	b.w	8000b62 <__retarget_lock_acquire_recursive>
 800078a:	bf00      	nop
 800078c:	200001bd 	.word	0x200001bd

08000790 <__sfp_lock_release>:
 8000790:	4801      	ldr	r0, [pc, #4]	; (8000798 <__sfp_lock_release+0x8>)
 8000792:	f000 b9e7 	b.w	8000b64 <__retarget_lock_release_recursive>
 8000796:	bf00      	nop
 8000798:	200001bd 	.word	0x200001bd

0800079c <__sinit>:
 800079c:	b510      	push	{r4, lr}
 800079e:	4604      	mov	r4, r0
 80007a0:	f7ff fff0 	bl	8000784 <__sfp_lock_acquire>
 80007a4:	6a23      	ldr	r3, [r4, #32]
 80007a6:	b11b      	cbz	r3, 80007b0 <__sinit+0x14>
 80007a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ac:	f7ff bff0 	b.w	8000790 <__sfp_lock_release>
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__sinit+0x28>)
 80007b2:	6223      	str	r3, [r4, #32]
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <__sinit+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f5      	bne.n	80007a8 <__sinit+0xc>
 80007bc:	f7ff ffc4 	bl	8000748 <global_stdio_init.part.0>
 80007c0:	e7f2      	b.n	80007a8 <__sinit+0xc>
 80007c2:	bf00      	nop
 80007c4:	08000709 	.word	0x08000709
 80007c8:	200001b4 	.word	0x200001b4

080007cc <_fwalk_sglue>:
 80007cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007d0:	4607      	mov	r7, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	4614      	mov	r4, r2
 80007d6:	2600      	movs	r6, #0
 80007d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007dc:	f1b9 0901 	subs.w	r9, r9, #1
 80007e0:	d505      	bpl.n	80007ee <_fwalk_sglue+0x22>
 80007e2:	6824      	ldr	r4, [r4, #0]
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d1f7      	bne.n	80007d8 <_fwalk_sglue+0xc>
 80007e8:	4630      	mov	r0, r6
 80007ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007ee:	89ab      	ldrh	r3, [r5, #12]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d907      	bls.n	8000804 <_fwalk_sglue+0x38>
 80007f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007f8:	3301      	adds	r3, #1
 80007fa:	d003      	beq.n	8000804 <_fwalk_sglue+0x38>
 80007fc:	4629      	mov	r1, r5
 80007fe:	4638      	mov	r0, r7
 8000800:	47c0      	blx	r8
 8000802:	4306      	orrs	r6, r0
 8000804:	3568      	adds	r5, #104	; 0x68
 8000806:	e7e9      	b.n	80007dc <_fwalk_sglue+0x10>

08000808 <_puts_r>:
 8000808:	6a03      	ldr	r3, [r0, #32]
 800080a:	b570      	push	{r4, r5, r6, lr}
 800080c:	6884      	ldr	r4, [r0, #8]
 800080e:	4605      	mov	r5, r0
 8000810:	460e      	mov	r6, r1
 8000812:	b90b      	cbnz	r3, 8000818 <_puts_r+0x10>
 8000814:	f7ff ffc2 	bl	800079c <__sinit>
 8000818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800081a:	07db      	lsls	r3, r3, #31
 800081c:	d405      	bmi.n	800082a <_puts_r+0x22>
 800081e:	89a3      	ldrh	r3, [r4, #12]
 8000820:	0598      	lsls	r0, r3, #22
 8000822:	d402      	bmi.n	800082a <_puts_r+0x22>
 8000824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000826:	f000 f99c 	bl	8000b62 <__retarget_lock_acquire_recursive>
 800082a:	89a3      	ldrh	r3, [r4, #12]
 800082c:	0719      	lsls	r1, r3, #28
 800082e:	d513      	bpl.n	8000858 <_puts_r+0x50>
 8000830:	6923      	ldr	r3, [r4, #16]
 8000832:	b18b      	cbz	r3, 8000858 <_puts_r+0x50>
 8000834:	3e01      	subs	r6, #1
 8000836:	68a3      	ldr	r3, [r4, #8]
 8000838:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800083c:	3b01      	subs	r3, #1
 800083e:	60a3      	str	r3, [r4, #8]
 8000840:	b9e9      	cbnz	r1, 800087e <_puts_r+0x76>
 8000842:	2b00      	cmp	r3, #0
 8000844:	da2e      	bge.n	80008a4 <_puts_r+0x9c>
 8000846:	4622      	mov	r2, r4
 8000848:	210a      	movs	r1, #10
 800084a:	4628      	mov	r0, r5
 800084c:	f000 f87b 	bl	8000946 <__swbuf_r>
 8000850:	3001      	adds	r0, #1
 8000852:	d007      	beq.n	8000864 <_puts_r+0x5c>
 8000854:	250a      	movs	r5, #10
 8000856:	e007      	b.n	8000868 <_puts_r+0x60>
 8000858:	4621      	mov	r1, r4
 800085a:	4628      	mov	r0, r5
 800085c:	f000 f8b0 	bl	80009c0 <__swsetup_r>
 8000860:	2800      	cmp	r0, #0
 8000862:	d0e7      	beq.n	8000834 <_puts_r+0x2c>
 8000864:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800086a:	07da      	lsls	r2, r3, #31
 800086c:	d405      	bmi.n	800087a <_puts_r+0x72>
 800086e:	89a3      	ldrh	r3, [r4, #12]
 8000870:	059b      	lsls	r3, r3, #22
 8000872:	d402      	bmi.n	800087a <_puts_r+0x72>
 8000874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000876:	f000 f975 	bl	8000b64 <__retarget_lock_release_recursive>
 800087a:	4628      	mov	r0, r5
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	2b00      	cmp	r3, #0
 8000880:	da04      	bge.n	800088c <_puts_r+0x84>
 8000882:	69a2      	ldr	r2, [r4, #24]
 8000884:	429a      	cmp	r2, r3
 8000886:	dc06      	bgt.n	8000896 <_puts_r+0x8e>
 8000888:	290a      	cmp	r1, #10
 800088a:	d004      	beq.n	8000896 <_puts_r+0x8e>
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	6022      	str	r2, [r4, #0]
 8000892:	7019      	strb	r1, [r3, #0]
 8000894:	e7cf      	b.n	8000836 <_puts_r+0x2e>
 8000896:	4622      	mov	r2, r4
 8000898:	4628      	mov	r0, r5
 800089a:	f000 f854 	bl	8000946 <__swbuf_r>
 800089e:	3001      	adds	r0, #1
 80008a0:	d1c9      	bne.n	8000836 <_puts_r+0x2e>
 80008a2:	e7df      	b.n	8000864 <_puts_r+0x5c>
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	250a      	movs	r5, #10
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	6022      	str	r2, [r4, #0]
 80008ac:	701d      	strb	r5, [r3, #0]
 80008ae:	e7db      	b.n	8000868 <_puts_r+0x60>

080008b0 <puts>:
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <puts+0xc>)
 80008b2:	4601      	mov	r1, r0
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f7ff bfa7 	b.w	8000808 <_puts_r>
 80008ba:	bf00      	nop
 80008bc:	20000058 	.word	0x20000058

080008c0 <__sread>:
 80008c0:	b510      	push	{r4, lr}
 80008c2:	460c      	mov	r4, r1
 80008c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c8:	f000 f8fc 	bl	8000ac4 <_read_r>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	bfab      	itete	ge
 80008d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008d2:	89a3      	ldrhlt	r3, [r4, #12]
 80008d4:	181b      	addge	r3, r3, r0
 80008d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008da:	bfac      	ite	ge
 80008dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80008de:	81a3      	strhlt	r3, [r4, #12]
 80008e0:	bd10      	pop	{r4, pc}

080008e2 <__swrite>:
 80008e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e6:	461f      	mov	r7, r3
 80008e8:	898b      	ldrh	r3, [r1, #12]
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	4605      	mov	r5, r0
 80008ee:	460c      	mov	r4, r1
 80008f0:	4616      	mov	r6, r2
 80008f2:	d505      	bpl.n	8000900 <__swrite+0x1e>
 80008f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f8:	2302      	movs	r3, #2
 80008fa:	2200      	movs	r2, #0
 80008fc:	f000 f8d0 	bl	8000aa0 <_lseek_r>
 8000900:	89a3      	ldrh	r3, [r4, #12]
 8000902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800090a:	81a3      	strh	r3, [r4, #12]
 800090c:	4632      	mov	r2, r6
 800090e:	463b      	mov	r3, r7
 8000910:	4628      	mov	r0, r5
 8000912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000916:	f000 b8e7 	b.w	8000ae8 <_write_r>

0800091a <__sseek>:
 800091a:	b510      	push	{r4, lr}
 800091c:	460c      	mov	r4, r1
 800091e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000922:	f000 f8bd 	bl	8000aa0 <_lseek_r>
 8000926:	1c43      	adds	r3, r0, #1
 8000928:	89a3      	ldrh	r3, [r4, #12]
 800092a:	bf15      	itete	ne
 800092c:	6560      	strne	r0, [r4, #84]	; 0x54
 800092e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000936:	81a3      	strheq	r3, [r4, #12]
 8000938:	bf18      	it	ne
 800093a:	81a3      	strhne	r3, [r4, #12]
 800093c:	bd10      	pop	{r4, pc}

0800093e <__sclose>:
 800093e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000942:	f000 b89d 	b.w	8000a80 <_close_r>

08000946 <__swbuf_r>:
 8000946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000948:	460e      	mov	r6, r1
 800094a:	4614      	mov	r4, r2
 800094c:	4605      	mov	r5, r0
 800094e:	b118      	cbz	r0, 8000958 <__swbuf_r+0x12>
 8000950:	6a03      	ldr	r3, [r0, #32]
 8000952:	b90b      	cbnz	r3, 8000958 <__swbuf_r+0x12>
 8000954:	f7ff ff22 	bl	800079c <__sinit>
 8000958:	69a3      	ldr	r3, [r4, #24]
 800095a:	60a3      	str	r3, [r4, #8]
 800095c:	89a3      	ldrh	r3, [r4, #12]
 800095e:	071a      	lsls	r2, r3, #28
 8000960:	d525      	bpl.n	80009ae <__swbuf_r+0x68>
 8000962:	6923      	ldr	r3, [r4, #16]
 8000964:	b31b      	cbz	r3, 80009ae <__swbuf_r+0x68>
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	6922      	ldr	r2, [r4, #16]
 800096a:	1a98      	subs	r0, r3, r2
 800096c:	6963      	ldr	r3, [r4, #20]
 800096e:	b2f6      	uxtb	r6, r6
 8000970:	4283      	cmp	r3, r0
 8000972:	4637      	mov	r7, r6
 8000974:	dc04      	bgt.n	8000980 <__swbuf_r+0x3a>
 8000976:	4621      	mov	r1, r4
 8000978:	4628      	mov	r0, r5
 800097a:	f000 fa73 	bl	8000e64 <_fflush_r>
 800097e:	b9e0      	cbnz	r0, 80009ba <__swbuf_r+0x74>
 8000980:	68a3      	ldr	r3, [r4, #8]
 8000982:	3b01      	subs	r3, #1
 8000984:	60a3      	str	r3, [r4, #8]
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	6022      	str	r2, [r4, #0]
 800098c:	701e      	strb	r6, [r3, #0]
 800098e:	6962      	ldr	r2, [r4, #20]
 8000990:	1c43      	adds	r3, r0, #1
 8000992:	429a      	cmp	r2, r3
 8000994:	d004      	beq.n	80009a0 <__swbuf_r+0x5a>
 8000996:	89a3      	ldrh	r3, [r4, #12]
 8000998:	07db      	lsls	r3, r3, #31
 800099a:	d506      	bpl.n	80009aa <__swbuf_r+0x64>
 800099c:	2e0a      	cmp	r6, #10
 800099e:	d104      	bne.n	80009aa <__swbuf_r+0x64>
 80009a0:	4621      	mov	r1, r4
 80009a2:	4628      	mov	r0, r5
 80009a4:	f000 fa5e 	bl	8000e64 <_fflush_r>
 80009a8:	b938      	cbnz	r0, 80009ba <__swbuf_r+0x74>
 80009aa:	4638      	mov	r0, r7
 80009ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ae:	4621      	mov	r1, r4
 80009b0:	4628      	mov	r0, r5
 80009b2:	f000 f805 	bl	80009c0 <__swsetup_r>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d0d5      	beq.n	8000966 <__swbuf_r+0x20>
 80009ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80009be:	e7f4      	b.n	80009aa <__swbuf_r+0x64>

080009c0 <__swsetup_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <__swsetup_r+0xac>)
 80009c4:	4605      	mov	r5, r0
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	460c      	mov	r4, r1
 80009ca:	b118      	cbz	r0, 80009d4 <__swsetup_r+0x14>
 80009cc:	6a03      	ldr	r3, [r0, #32]
 80009ce:	b90b      	cbnz	r3, 80009d4 <__swsetup_r+0x14>
 80009d0:	f7ff fee4 	bl	800079c <__sinit>
 80009d4:	89a3      	ldrh	r3, [r4, #12]
 80009d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009da:	0718      	lsls	r0, r3, #28
 80009dc:	d422      	bmi.n	8000a24 <__swsetup_r+0x64>
 80009de:	06d9      	lsls	r1, r3, #27
 80009e0:	d407      	bmi.n	80009f2 <__swsetup_r+0x32>
 80009e2:	2309      	movs	r3, #9
 80009e4:	602b      	str	r3, [r5, #0]
 80009e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009ea:	81a3      	strh	r3, [r4, #12]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f0:	e034      	b.n	8000a5c <__swsetup_r+0x9c>
 80009f2:	0758      	lsls	r0, r3, #29
 80009f4:	d512      	bpl.n	8000a1c <__swsetup_r+0x5c>
 80009f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009f8:	b141      	cbz	r1, 8000a0c <__swsetup_r+0x4c>
 80009fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d002      	beq.n	8000a08 <__swsetup_r+0x48>
 8000a02:	4628      	mov	r0, r5
 8000a04:	f000 f8b0 	bl	8000b68 <_free_r>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6363      	str	r3, [r4, #52]	; 0x34
 8000a0c:	89a3      	ldrh	r3, [r4, #12]
 8000a0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a12:	81a3      	strh	r3, [r4, #12]
 8000a14:	2300      	movs	r3, #0
 8000a16:	6063      	str	r3, [r4, #4]
 8000a18:	6923      	ldr	r3, [r4, #16]
 8000a1a:	6023      	str	r3, [r4, #0]
 8000a1c:	89a3      	ldrh	r3, [r4, #12]
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	81a3      	strh	r3, [r4, #12]
 8000a24:	6923      	ldr	r3, [r4, #16]
 8000a26:	b94b      	cbnz	r3, 8000a3c <__swsetup_r+0x7c>
 8000a28:	89a3      	ldrh	r3, [r4, #12]
 8000a2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a32:	d003      	beq.n	8000a3c <__swsetup_r+0x7c>
 8000a34:	4621      	mov	r1, r4
 8000a36:	4628      	mov	r0, r5
 8000a38:	f000 fa62 	bl	8000f00 <__smakebuf_r>
 8000a3c:	89a0      	ldrh	r0, [r4, #12]
 8000a3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a42:	f010 0301 	ands.w	r3, r0, #1
 8000a46:	d00a      	beq.n	8000a5e <__swsetup_r+0x9e>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60a3      	str	r3, [r4, #8]
 8000a4c:	6963      	ldr	r3, [r4, #20]
 8000a4e:	425b      	negs	r3, r3
 8000a50:	61a3      	str	r3, [r4, #24]
 8000a52:	6923      	ldr	r3, [r4, #16]
 8000a54:	b943      	cbnz	r3, 8000a68 <__swsetup_r+0xa8>
 8000a56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a5a:	d1c4      	bne.n	80009e6 <__swsetup_r+0x26>
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
 8000a5e:	0781      	lsls	r1, r0, #30
 8000a60:	bf58      	it	pl
 8000a62:	6963      	ldrpl	r3, [r4, #20]
 8000a64:	60a3      	str	r3, [r4, #8]
 8000a66:	e7f4      	b.n	8000a52 <__swsetup_r+0x92>
 8000a68:	2000      	movs	r0, #0
 8000a6a:	e7f7      	b.n	8000a5c <__swsetup_r+0x9c>
 8000a6c:	20000058 	.word	0x20000058

08000a70 <memset>:
 8000a70:	4402      	add	r2, r0
 8000a72:	4603      	mov	r3, r0
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d100      	bne.n	8000a7a <memset+0xa>
 8000a78:	4770      	bx	lr
 8000a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a7e:	e7f9      	b.n	8000a74 <memset+0x4>

08000a80 <_close_r>:
 8000a80:	b538      	push	{r3, r4, r5, lr}
 8000a82:	4d06      	ldr	r5, [pc, #24]	; (8000a9c <_close_r+0x1c>)
 8000a84:	2300      	movs	r3, #0
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	602b      	str	r3, [r5, #0]
 8000a8c:	f7ff fd65 	bl	800055a <_close>
 8000a90:	1c43      	adds	r3, r0, #1
 8000a92:	d102      	bne.n	8000a9a <_close_r+0x1a>
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	b103      	cbz	r3, 8000a9a <_close_r+0x1a>
 8000a98:	6023      	str	r3, [r4, #0]
 8000a9a:	bd38      	pop	{r3, r4, r5, pc}
 8000a9c:	200001b8 	.word	0x200001b8

08000aa0 <_lseek_r>:
 8000aa0:	b538      	push	{r3, r4, r5, lr}
 8000aa2:	4d07      	ldr	r5, [pc, #28]	; (8000ac0 <_lseek_r+0x20>)
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	602a      	str	r2, [r5, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	f7ff fd7a 	bl	80005a8 <_lseek>
 8000ab4:	1c43      	adds	r3, r0, #1
 8000ab6:	d102      	bne.n	8000abe <_lseek_r+0x1e>
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	b103      	cbz	r3, 8000abe <_lseek_r+0x1e>
 8000abc:	6023      	str	r3, [r4, #0]
 8000abe:	bd38      	pop	{r3, r4, r5, pc}
 8000ac0:	200001b8 	.word	0x200001b8

08000ac4 <_read_r>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	4d07      	ldr	r5, [pc, #28]	; (8000ae4 <_read_r+0x20>)
 8000ac8:	4604      	mov	r4, r0
 8000aca:	4608      	mov	r0, r1
 8000acc:	4611      	mov	r1, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	602a      	str	r2, [r5, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f7ff fd08 	bl	80004e8 <_read>
 8000ad8:	1c43      	adds	r3, r0, #1
 8000ada:	d102      	bne.n	8000ae2 <_read_r+0x1e>
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	b103      	cbz	r3, 8000ae2 <_read_r+0x1e>
 8000ae0:	6023      	str	r3, [r4, #0]
 8000ae2:	bd38      	pop	{r3, r4, r5, pc}
 8000ae4:	200001b8 	.word	0x200001b8

08000ae8 <_write_r>:
 8000ae8:	b538      	push	{r3, r4, r5, lr}
 8000aea:	4d07      	ldr	r5, [pc, #28]	; (8000b08 <_write_r+0x20>)
 8000aec:	4604      	mov	r4, r0
 8000aee:	4608      	mov	r0, r1
 8000af0:	4611      	mov	r1, r2
 8000af2:	2200      	movs	r2, #0
 8000af4:	602a      	str	r2, [r5, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	f7ff fd13 	bl	8000522 <_write>
 8000afc:	1c43      	adds	r3, r0, #1
 8000afe:	d102      	bne.n	8000b06 <_write_r+0x1e>
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	b103      	cbz	r3, 8000b06 <_write_r+0x1e>
 8000b04:	6023      	str	r3, [r4, #0]
 8000b06:	bd38      	pop	{r3, r4, r5, pc}
 8000b08:	200001b8 	.word	0x200001b8

08000b0c <__errno>:
 8000b0c:	4b01      	ldr	r3, [pc, #4]	; (8000b14 <__errno+0x8>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000058 	.word	0x20000058

08000b18 <__libc_init_array>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	4d0d      	ldr	r5, [pc, #52]	; (8000b50 <__libc_init_array+0x38>)
 8000b1c:	4c0d      	ldr	r4, [pc, #52]	; (8000b54 <__libc_init_array+0x3c>)
 8000b1e:	1b64      	subs	r4, r4, r5
 8000b20:	10a4      	asrs	r4, r4, #2
 8000b22:	2600      	movs	r6, #0
 8000b24:	42a6      	cmp	r6, r4
 8000b26:	d109      	bne.n	8000b3c <__libc_init_array+0x24>
 8000b28:	4d0b      	ldr	r5, [pc, #44]	; (8000b58 <__libc_init_array+0x40>)
 8000b2a:	4c0c      	ldr	r4, [pc, #48]	; (8000b5c <__libc_init_array+0x44>)
 8000b2c:	f000 fa56 	bl	8000fdc <_init>
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	10a4      	asrs	r4, r4, #2
 8000b34:	2600      	movs	r6, #0
 8000b36:	42a6      	cmp	r6, r4
 8000b38:	d105      	bne.n	8000b46 <__libc_init_array+0x2e>
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b40:	4798      	blx	r3
 8000b42:	3601      	adds	r6, #1
 8000b44:	e7ee      	b.n	8000b24 <__libc_init_array+0xc>
 8000b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b4a:	4798      	blx	r3
 8000b4c:	3601      	adds	r6, #1
 8000b4e:	e7f2      	b.n	8000b36 <__libc_init_array+0x1e>
 8000b50:	08001024 	.word	0x08001024
 8000b54:	08001024 	.word	0x08001024
 8000b58:	08001024 	.word	0x08001024
 8000b5c:	08001028 	.word	0x08001028

08000b60 <__retarget_lock_init_recursive>:
 8000b60:	4770      	bx	lr

08000b62 <__retarget_lock_acquire_recursive>:
 8000b62:	4770      	bx	lr

08000b64 <__retarget_lock_release_recursive>:
 8000b64:	4770      	bx	lr
	...

08000b68 <_free_r>:
 8000b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d044      	beq.n	8000bf8 <_free_r+0x90>
 8000b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b72:	9001      	str	r0, [sp, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f1a1 0404 	sub.w	r4, r1, #4
 8000b7a:	bfb8      	it	lt
 8000b7c:	18e4      	addlt	r4, r4, r3
 8000b7e:	f000 f8df 	bl	8000d40 <__malloc_lock>
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <_free_r+0x94>)
 8000b84:	9801      	ldr	r0, [sp, #4]
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	b933      	cbnz	r3, 8000b98 <_free_r+0x30>
 8000b8a:	6063      	str	r3, [r4, #4]
 8000b8c:	6014      	str	r4, [r2, #0]
 8000b8e:	b003      	add	sp, #12
 8000b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b94:	f000 b8da 	b.w	8000d4c <__malloc_unlock>
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	d908      	bls.n	8000bae <_free_r+0x46>
 8000b9c:	6825      	ldr	r5, [r4, #0]
 8000b9e:	1961      	adds	r1, r4, r5
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	bf01      	itttt	eq
 8000ba4:	6819      	ldreq	r1, [r3, #0]
 8000ba6:	685b      	ldreq	r3, [r3, #4]
 8000ba8:	1949      	addeq	r1, r1, r5
 8000baa:	6021      	streq	r1, [r4, #0]
 8000bac:	e7ed      	b.n	8000b8a <_free_r+0x22>
 8000bae:	461a      	mov	r2, r3
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	b10b      	cbz	r3, 8000bb8 <_free_r+0x50>
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	d9fa      	bls.n	8000bae <_free_r+0x46>
 8000bb8:	6811      	ldr	r1, [r2, #0]
 8000bba:	1855      	adds	r5, r2, r1
 8000bbc:	42a5      	cmp	r5, r4
 8000bbe:	d10b      	bne.n	8000bd8 <_free_r+0x70>
 8000bc0:	6824      	ldr	r4, [r4, #0]
 8000bc2:	4421      	add	r1, r4
 8000bc4:	1854      	adds	r4, r2, r1
 8000bc6:	42a3      	cmp	r3, r4
 8000bc8:	6011      	str	r1, [r2, #0]
 8000bca:	d1e0      	bne.n	8000b8e <_free_r+0x26>
 8000bcc:	681c      	ldr	r4, [r3, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	6053      	str	r3, [r2, #4]
 8000bd2:	440c      	add	r4, r1
 8000bd4:	6014      	str	r4, [r2, #0]
 8000bd6:	e7da      	b.n	8000b8e <_free_r+0x26>
 8000bd8:	d902      	bls.n	8000be0 <_free_r+0x78>
 8000bda:	230c      	movs	r3, #12
 8000bdc:	6003      	str	r3, [r0, #0]
 8000bde:	e7d6      	b.n	8000b8e <_free_r+0x26>
 8000be0:	6825      	ldr	r5, [r4, #0]
 8000be2:	1961      	adds	r1, r4, r5
 8000be4:	428b      	cmp	r3, r1
 8000be6:	bf04      	itt	eq
 8000be8:	6819      	ldreq	r1, [r3, #0]
 8000bea:	685b      	ldreq	r3, [r3, #4]
 8000bec:	6063      	str	r3, [r4, #4]
 8000bee:	bf04      	itt	eq
 8000bf0:	1949      	addeq	r1, r1, r5
 8000bf2:	6021      	streq	r1, [r4, #0]
 8000bf4:	6054      	str	r4, [r2, #4]
 8000bf6:	e7ca      	b.n	8000b8e <_free_r+0x26>
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bd30      	pop	{r4, r5, pc}
 8000bfc:	200001c0 	.word	0x200001c0

08000c00 <sbrk_aligned>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	4e0e      	ldr	r6, [pc, #56]	; (8000c3c <sbrk_aligned+0x3c>)
 8000c04:	460c      	mov	r4, r1
 8000c06:	6831      	ldr	r1, [r6, #0]
 8000c08:	4605      	mov	r5, r0
 8000c0a:	b911      	cbnz	r1, 8000c12 <sbrk_aligned+0x12>
 8000c0c:	f000 f9d6 	bl	8000fbc <_sbrk_r>
 8000c10:	6030      	str	r0, [r6, #0]
 8000c12:	4621      	mov	r1, r4
 8000c14:	4628      	mov	r0, r5
 8000c16:	f000 f9d1 	bl	8000fbc <_sbrk_r>
 8000c1a:	1c43      	adds	r3, r0, #1
 8000c1c:	d00a      	beq.n	8000c34 <sbrk_aligned+0x34>
 8000c1e:	1cc4      	adds	r4, r0, #3
 8000c20:	f024 0403 	bic.w	r4, r4, #3
 8000c24:	42a0      	cmp	r0, r4
 8000c26:	d007      	beq.n	8000c38 <sbrk_aligned+0x38>
 8000c28:	1a21      	subs	r1, r4, r0
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f000 f9c6 	bl	8000fbc <_sbrk_r>
 8000c30:	3001      	adds	r0, #1
 8000c32:	d101      	bne.n	8000c38 <sbrk_aligned+0x38>
 8000c34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000c38:	4620      	mov	r0, r4
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	200001c4 	.word	0x200001c4

08000c40 <_malloc_r>:
 8000c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c44:	1ccd      	adds	r5, r1, #3
 8000c46:	f025 0503 	bic.w	r5, r5, #3
 8000c4a:	3508      	adds	r5, #8
 8000c4c:	2d0c      	cmp	r5, #12
 8000c4e:	bf38      	it	cc
 8000c50:	250c      	movcc	r5, #12
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	4607      	mov	r7, r0
 8000c56:	db01      	blt.n	8000c5c <_malloc_r+0x1c>
 8000c58:	42a9      	cmp	r1, r5
 8000c5a:	d905      	bls.n	8000c68 <_malloc_r+0x28>
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	2600      	movs	r6, #0
 8000c62:	4630      	mov	r0, r6
 8000c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d3c <_malloc_r+0xfc>
 8000c6c:	f000 f868 	bl	8000d40 <__malloc_lock>
 8000c70:	f8d8 3000 	ldr.w	r3, [r8]
 8000c74:	461c      	mov	r4, r3
 8000c76:	bb5c      	cbnz	r4, 8000cd0 <_malloc_r+0x90>
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4638      	mov	r0, r7
 8000c7c:	f7ff ffc0 	bl	8000c00 <sbrk_aligned>
 8000c80:	1c43      	adds	r3, r0, #1
 8000c82:	4604      	mov	r4, r0
 8000c84:	d155      	bne.n	8000d32 <_malloc_r+0xf2>
 8000c86:	f8d8 4000 	ldr.w	r4, [r8]
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d145      	bne.n	8000d1c <_malloc_r+0xdc>
 8000c90:	2c00      	cmp	r4, #0
 8000c92:	d048      	beq.n	8000d26 <_malloc_r+0xe6>
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	4631      	mov	r1, r6
 8000c98:	4638      	mov	r0, r7
 8000c9a:	eb04 0903 	add.w	r9, r4, r3
 8000c9e:	f000 f98d 	bl	8000fbc <_sbrk_r>
 8000ca2:	4581      	cmp	r9, r0
 8000ca4:	d13f      	bne.n	8000d26 <_malloc_r+0xe6>
 8000ca6:	6821      	ldr	r1, [r4, #0]
 8000ca8:	1a6d      	subs	r5, r5, r1
 8000caa:	4629      	mov	r1, r5
 8000cac:	4638      	mov	r0, r7
 8000cae:	f7ff ffa7 	bl	8000c00 <sbrk_aligned>
 8000cb2:	3001      	adds	r0, #1
 8000cb4:	d037      	beq.n	8000d26 <_malloc_r+0xe6>
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	442b      	add	r3, r5
 8000cba:	6023      	str	r3, [r4, #0]
 8000cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d038      	beq.n	8000d36 <_malloc_r+0xf6>
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d12b      	bne.n	8000d22 <_malloc_r+0xe2>
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	e00f      	b.n	8000cf0 <_malloc_r+0xb0>
 8000cd0:	6822      	ldr	r2, [r4, #0]
 8000cd2:	1b52      	subs	r2, r2, r5
 8000cd4:	d41f      	bmi.n	8000d16 <_malloc_r+0xd6>
 8000cd6:	2a0b      	cmp	r2, #11
 8000cd8:	d917      	bls.n	8000d0a <_malloc_r+0xca>
 8000cda:	1961      	adds	r1, r4, r5
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	6025      	str	r5, [r4, #0]
 8000ce0:	bf18      	it	ne
 8000ce2:	6059      	strne	r1, [r3, #4]
 8000ce4:	6863      	ldr	r3, [r4, #4]
 8000ce6:	bf08      	it	eq
 8000ce8:	f8c8 1000 	streq.w	r1, [r8]
 8000cec:	5162      	str	r2, [r4, r5]
 8000cee:	604b      	str	r3, [r1, #4]
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	f104 060b 	add.w	r6, r4, #11
 8000cf6:	f000 f829 	bl	8000d4c <__malloc_unlock>
 8000cfa:	f026 0607 	bic.w	r6, r6, #7
 8000cfe:	1d23      	adds	r3, r4, #4
 8000d00:	1af2      	subs	r2, r6, r3
 8000d02:	d0ae      	beq.n	8000c62 <_malloc_r+0x22>
 8000d04:	1b9b      	subs	r3, r3, r6
 8000d06:	50a3      	str	r3, [r4, r2]
 8000d08:	e7ab      	b.n	8000c62 <_malloc_r+0x22>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	6862      	ldr	r2, [r4, #4]
 8000d0e:	d1dd      	bne.n	8000ccc <_malloc_r+0x8c>
 8000d10:	f8c8 2000 	str.w	r2, [r8]
 8000d14:	e7ec      	b.n	8000cf0 <_malloc_r+0xb0>
 8000d16:	4623      	mov	r3, r4
 8000d18:	6864      	ldr	r4, [r4, #4]
 8000d1a:	e7ac      	b.n	8000c76 <_malloc_r+0x36>
 8000d1c:	4634      	mov	r4, r6
 8000d1e:	6876      	ldr	r6, [r6, #4]
 8000d20:	e7b4      	b.n	8000c8c <_malloc_r+0x4c>
 8000d22:	4613      	mov	r3, r2
 8000d24:	e7cc      	b.n	8000cc0 <_malloc_r+0x80>
 8000d26:	230c      	movs	r3, #12
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4638      	mov	r0, r7
 8000d2c:	f000 f80e 	bl	8000d4c <__malloc_unlock>
 8000d30:	e797      	b.n	8000c62 <_malloc_r+0x22>
 8000d32:	6025      	str	r5, [r4, #0]
 8000d34:	e7dc      	b.n	8000cf0 <_malloc_r+0xb0>
 8000d36:	605b      	str	r3, [r3, #4]
 8000d38:	deff      	udf	#255	; 0xff
 8000d3a:	bf00      	nop
 8000d3c:	200001c0 	.word	0x200001c0

08000d40 <__malloc_lock>:
 8000d40:	4801      	ldr	r0, [pc, #4]	; (8000d48 <__malloc_lock+0x8>)
 8000d42:	f7ff bf0e 	b.w	8000b62 <__retarget_lock_acquire_recursive>
 8000d46:	bf00      	nop
 8000d48:	200001bc 	.word	0x200001bc

08000d4c <__malloc_unlock>:
 8000d4c:	4801      	ldr	r0, [pc, #4]	; (8000d54 <__malloc_unlock+0x8>)
 8000d4e:	f7ff bf09 	b.w	8000b64 <__retarget_lock_release_recursive>
 8000d52:	bf00      	nop
 8000d54:	200001bc 	.word	0x200001bc

08000d58 <__sflush_r>:
 8000d58:	898a      	ldrh	r2, [r1, #12]
 8000d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5e:	4605      	mov	r5, r0
 8000d60:	0710      	lsls	r0, r2, #28
 8000d62:	460c      	mov	r4, r1
 8000d64:	d458      	bmi.n	8000e18 <__sflush_r+0xc0>
 8000d66:	684b      	ldr	r3, [r1, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	dc05      	bgt.n	8000d78 <__sflush_r+0x20>
 8000d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dc02      	bgt.n	8000d78 <__sflush_r+0x20>
 8000d72:	2000      	movs	r0, #0
 8000d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d0f9      	beq.n	8000d72 <__sflush_r+0x1a>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d84:	682f      	ldr	r7, [r5, #0]
 8000d86:	6a21      	ldr	r1, [r4, #32]
 8000d88:	602b      	str	r3, [r5, #0]
 8000d8a:	d032      	beq.n	8000df2 <__sflush_r+0x9a>
 8000d8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d8e:	89a3      	ldrh	r3, [r4, #12]
 8000d90:	075a      	lsls	r2, r3, #29
 8000d92:	d505      	bpl.n	8000da0 <__sflush_r+0x48>
 8000d94:	6863      	ldr	r3, [r4, #4]
 8000d96:	1ac0      	subs	r0, r0, r3
 8000d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d9a:	b10b      	cbz	r3, 8000da0 <__sflush_r+0x48>
 8000d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d9e:	1ac0      	subs	r0, r0, r3
 8000da0:	2300      	movs	r3, #0
 8000da2:	4602      	mov	r2, r0
 8000da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000da6:	6a21      	ldr	r1, [r4, #32]
 8000da8:	4628      	mov	r0, r5
 8000daa:	47b0      	blx	r6
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	89a3      	ldrh	r3, [r4, #12]
 8000db0:	d106      	bne.n	8000dc0 <__sflush_r+0x68>
 8000db2:	6829      	ldr	r1, [r5, #0]
 8000db4:	291d      	cmp	r1, #29
 8000db6:	d82b      	bhi.n	8000e10 <__sflush_r+0xb8>
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <__sflush_r+0x108>)
 8000dba:	410a      	asrs	r2, r1
 8000dbc:	07d6      	lsls	r6, r2, #31
 8000dbe:	d427      	bmi.n	8000e10 <__sflush_r+0xb8>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6062      	str	r2, [r4, #4]
 8000dc4:	04d9      	lsls	r1, r3, #19
 8000dc6:	6922      	ldr	r2, [r4, #16]
 8000dc8:	6022      	str	r2, [r4, #0]
 8000dca:	d504      	bpl.n	8000dd6 <__sflush_r+0x7e>
 8000dcc:	1c42      	adds	r2, r0, #1
 8000dce:	d101      	bne.n	8000dd4 <__sflush_r+0x7c>
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	b903      	cbnz	r3, 8000dd6 <__sflush_r+0x7e>
 8000dd4:	6560      	str	r0, [r4, #84]	; 0x54
 8000dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dd8:	602f      	str	r7, [r5, #0]
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	d0c9      	beq.n	8000d72 <__sflush_r+0x1a>
 8000dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d002      	beq.n	8000dec <__sflush_r+0x94>
 8000de6:	4628      	mov	r0, r5
 8000de8:	f7ff febe 	bl	8000b68 <_free_r>
 8000dec:	2000      	movs	r0, #0
 8000dee:	6360      	str	r0, [r4, #52]	; 0x34
 8000df0:	e7c0      	b.n	8000d74 <__sflush_r+0x1c>
 8000df2:	2301      	movs	r3, #1
 8000df4:	4628      	mov	r0, r5
 8000df6:	47b0      	blx	r6
 8000df8:	1c41      	adds	r1, r0, #1
 8000dfa:	d1c8      	bne.n	8000d8e <__sflush_r+0x36>
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0c5      	beq.n	8000d8e <__sflush_r+0x36>
 8000e02:	2b1d      	cmp	r3, #29
 8000e04:	d001      	beq.n	8000e0a <__sflush_r+0xb2>
 8000e06:	2b16      	cmp	r3, #22
 8000e08:	d101      	bne.n	8000e0e <__sflush_r+0xb6>
 8000e0a:	602f      	str	r7, [r5, #0]
 8000e0c:	e7b1      	b.n	8000d72 <__sflush_r+0x1a>
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e14:	81a3      	strh	r3, [r4, #12]
 8000e16:	e7ad      	b.n	8000d74 <__sflush_r+0x1c>
 8000e18:	690f      	ldr	r7, [r1, #16]
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d0a9      	beq.n	8000d72 <__sflush_r+0x1a>
 8000e1e:	0793      	lsls	r3, r2, #30
 8000e20:	680e      	ldr	r6, [r1, #0]
 8000e22:	bf08      	it	eq
 8000e24:	694b      	ldreq	r3, [r1, #20]
 8000e26:	600f      	str	r7, [r1, #0]
 8000e28:	bf18      	it	ne
 8000e2a:	2300      	movne	r3, #0
 8000e2c:	eba6 0807 	sub.w	r8, r6, r7
 8000e30:	608b      	str	r3, [r1, #8]
 8000e32:	f1b8 0f00 	cmp.w	r8, #0
 8000e36:	dd9c      	ble.n	8000d72 <__sflush_r+0x1a>
 8000e38:	6a21      	ldr	r1, [r4, #32]
 8000e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e3c:	4643      	mov	r3, r8
 8000e3e:	463a      	mov	r2, r7
 8000e40:	4628      	mov	r0, r5
 8000e42:	47b0      	blx	r6
 8000e44:	2800      	cmp	r0, #0
 8000e46:	dc06      	bgt.n	8000e56 <__sflush_r+0xfe>
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	81a3      	strh	r3, [r4, #12]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e54:	e78e      	b.n	8000d74 <__sflush_r+0x1c>
 8000e56:	4407      	add	r7, r0
 8000e58:	eba8 0800 	sub.w	r8, r8, r0
 8000e5c:	e7e9      	b.n	8000e32 <__sflush_r+0xda>
 8000e5e:	bf00      	nop
 8000e60:	dfbffffe 	.word	0xdfbffffe

08000e64 <_fflush_r>:
 8000e64:	b538      	push	{r3, r4, r5, lr}
 8000e66:	690b      	ldr	r3, [r1, #16]
 8000e68:	4605      	mov	r5, r0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	b913      	cbnz	r3, 8000e74 <_fflush_r+0x10>
 8000e6e:	2500      	movs	r5, #0
 8000e70:	4628      	mov	r0, r5
 8000e72:	bd38      	pop	{r3, r4, r5, pc}
 8000e74:	b118      	cbz	r0, 8000e7e <_fflush_r+0x1a>
 8000e76:	6a03      	ldr	r3, [r0, #32]
 8000e78:	b90b      	cbnz	r3, 8000e7e <_fflush_r+0x1a>
 8000e7a:	f7ff fc8f 	bl	800079c <__sinit>
 8000e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f3      	beq.n	8000e6e <_fflush_r+0xa>
 8000e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e88:	07d0      	lsls	r0, r2, #31
 8000e8a:	d404      	bmi.n	8000e96 <_fflush_r+0x32>
 8000e8c:	0599      	lsls	r1, r3, #22
 8000e8e:	d402      	bmi.n	8000e96 <_fflush_r+0x32>
 8000e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e92:	f7ff fe66 	bl	8000b62 <__retarget_lock_acquire_recursive>
 8000e96:	4628      	mov	r0, r5
 8000e98:	4621      	mov	r1, r4
 8000e9a:	f7ff ff5d 	bl	8000d58 <__sflush_r>
 8000e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ea0:	07da      	lsls	r2, r3, #31
 8000ea2:	4605      	mov	r5, r0
 8000ea4:	d4e4      	bmi.n	8000e70 <_fflush_r+0xc>
 8000ea6:	89a3      	ldrh	r3, [r4, #12]
 8000ea8:	059b      	lsls	r3, r3, #22
 8000eaa:	d4e1      	bmi.n	8000e70 <_fflush_r+0xc>
 8000eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eae:	f7ff fe59 	bl	8000b64 <__retarget_lock_release_recursive>
 8000eb2:	e7dd      	b.n	8000e70 <_fflush_r+0xc>

08000eb4 <__swhatbuf_r>:
 8000eb4:	b570      	push	{r4, r5, r6, lr}
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ebc:	2900      	cmp	r1, #0
 8000ebe:	b096      	sub	sp, #88	; 0x58
 8000ec0:	4615      	mov	r5, r2
 8000ec2:	461e      	mov	r6, r3
 8000ec4:	da0d      	bge.n	8000ee2 <__swhatbuf_r+0x2e>
 8000ec6:	89a3      	ldrh	r3, [r4, #12]
 8000ec8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ecc:	f04f 0100 	mov.w	r1, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000ed6:	2340      	movne	r3, #64	; 0x40
 8000ed8:	2000      	movs	r0, #0
 8000eda:	6031      	str	r1, [r6, #0]
 8000edc:	602b      	str	r3, [r5, #0]
 8000ede:	b016      	add	sp, #88	; 0x58
 8000ee0:	bd70      	pop	{r4, r5, r6, pc}
 8000ee2:	466a      	mov	r2, sp
 8000ee4:	f000 f848 	bl	8000f78 <_fstat_r>
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	dbec      	blt.n	8000ec6 <__swhatbuf_r+0x12>
 8000eec:	9901      	ldr	r1, [sp, #4]
 8000eee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000ef2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000ef6:	4259      	negs	r1, r3
 8000ef8:	4159      	adcs	r1, r3
 8000efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efe:	e7eb      	b.n	8000ed8 <__swhatbuf_r+0x24>

08000f00 <__smakebuf_r>:
 8000f00:	898b      	ldrh	r3, [r1, #12]
 8000f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f04:	079d      	lsls	r5, r3, #30
 8000f06:	4606      	mov	r6, r0
 8000f08:	460c      	mov	r4, r1
 8000f0a:	d507      	bpl.n	8000f1c <__smakebuf_r+0x1c>
 8000f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	6123      	str	r3, [r4, #16]
 8000f14:	2301      	movs	r3, #1
 8000f16:	6163      	str	r3, [r4, #20]
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
 8000f1c:	ab01      	add	r3, sp, #4
 8000f1e:	466a      	mov	r2, sp
 8000f20:	f7ff ffc8 	bl	8000eb4 <__swhatbuf_r>
 8000f24:	9900      	ldr	r1, [sp, #0]
 8000f26:	4605      	mov	r5, r0
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f7ff fe89 	bl	8000c40 <_malloc_r>
 8000f2e:	b948      	cbnz	r0, 8000f44 <__smakebuf_r+0x44>
 8000f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f34:	059a      	lsls	r2, r3, #22
 8000f36:	d4ef      	bmi.n	8000f18 <__smakebuf_r+0x18>
 8000f38:	f023 0303 	bic.w	r3, r3, #3
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	81a3      	strh	r3, [r4, #12]
 8000f42:	e7e3      	b.n	8000f0c <__smakebuf_r+0xc>
 8000f44:	89a3      	ldrh	r3, [r4, #12]
 8000f46:	6020      	str	r0, [r4, #0]
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	81a3      	strh	r3, [r4, #12]
 8000f4e:	9b00      	ldr	r3, [sp, #0]
 8000f50:	6163      	str	r3, [r4, #20]
 8000f52:	9b01      	ldr	r3, [sp, #4]
 8000f54:	6120      	str	r0, [r4, #16]
 8000f56:	b15b      	cbz	r3, 8000f70 <__smakebuf_r+0x70>
 8000f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	f000 f81d 	bl	8000f9c <_isatty_r>
 8000f62:	b128      	cbz	r0, 8000f70 <__smakebuf_r+0x70>
 8000f64:	89a3      	ldrh	r3, [r4, #12]
 8000f66:	f023 0303 	bic.w	r3, r3, #3
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	81a3      	strh	r3, [r4, #12]
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	431d      	orrs	r5, r3
 8000f74:	81a5      	strh	r5, [r4, #12]
 8000f76:	e7cf      	b.n	8000f18 <__smakebuf_r+0x18>

08000f78 <_fstat_r>:
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4d07      	ldr	r5, [pc, #28]	; (8000f98 <_fstat_r+0x20>)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4604      	mov	r4, r0
 8000f80:	4608      	mov	r0, r1
 8000f82:	4611      	mov	r1, r2
 8000f84:	602b      	str	r3, [r5, #0]
 8000f86:	f7ff faf4 	bl	8000572 <_fstat>
 8000f8a:	1c43      	adds	r3, r0, #1
 8000f8c:	d102      	bne.n	8000f94 <_fstat_r+0x1c>
 8000f8e:	682b      	ldr	r3, [r5, #0]
 8000f90:	b103      	cbz	r3, 8000f94 <_fstat_r+0x1c>
 8000f92:	6023      	str	r3, [r4, #0]
 8000f94:	bd38      	pop	{r3, r4, r5, pc}
 8000f96:	bf00      	nop
 8000f98:	200001b8 	.word	0x200001b8

08000f9c <_isatty_r>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	4d06      	ldr	r5, [pc, #24]	; (8000fb8 <_isatty_r+0x1c>)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	602b      	str	r3, [r5, #0]
 8000fa8:	f7ff faf3 	bl	8000592 <_isatty>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d102      	bne.n	8000fb6 <_isatty_r+0x1a>
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	b103      	cbz	r3, 8000fb6 <_isatty_r+0x1a>
 8000fb4:	6023      	str	r3, [r4, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	200001b8 	.word	0x200001b8

08000fbc <_sbrk_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4d06      	ldr	r5, [pc, #24]	; (8000fd8 <_sbrk_r+0x1c>)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	602b      	str	r3, [r5, #0]
 8000fc8:	f7ff fafc 	bl	80005c4 <_sbrk>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d102      	bne.n	8000fd6 <_sbrk_r+0x1a>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b103      	cbz	r3, 8000fd6 <_sbrk_r+0x1a>
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	200001b8 	.word	0x200001b8

08000fdc <_init>:
 8000fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fde:	bf00      	nop
 8000fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe2:	bc08      	pop	{r3}
 8000fe4:	469e      	mov	lr, r3
 8000fe6:	4770      	bx	lr

08000fe8 <_fini>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	bf00      	nop
 8000fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fee:	bc08      	pop	{r3}
 8000ff0:	469e      	mov	lr, r3
 8000ff2:	4770      	bx	lr
