/*
 * stm32f407_USART_drivers.c
 *
 *  Created on: Mar 28, 2024
 *      Author: ritik
 */

#include "stm32f407_USART_drivers.h"

static void Clear_OVR_IDLE_FLAG(USART_Handle_t *pUSARTHandle){
	uint32_t dummyread;
	dummyread = pUSARTHandle->pUARTx->SR;
	dummyread = pUSARTHandle->pUARTx->DR;
	(void)dummyread;
}
void USART_PeriClockControl(USARTx_Reg_t *pUSARTx,uint8_t EnorDi){
	if(EnorDi==ENABLE){
		if(pUSARTx==USART1_REG){
			USART1_ENABLE();
		}
		else if(pUSARTx==USART2_REG){
			USART2_ENABLE();
		}else if(pUSARTx==USART3_REG){
			USART3_ENABLE();
		}else if(pUSARTx==UART4_REG){
			UART4_ENABLE();
		}
		else if(pUSARTx==UART5_REG){
			UART5_ENABLE();
		}else if(pUSARTx==USART6_REG){
			USART6_ENABLE();

		}
	}else{
		if(pUSARTx==USART1_REG){
			((RCC_REG -> APB2ENR) &= ~(1<<4));
		}
		else if(pUSARTx==USART2_REG){
			((RCC_REG -> APB1ENR) &= ~(1<<17));
		}else if(pUSARTx==USART3_REG){
			((RCC_REG -> APB1ENR) &= ~(1<<18));
		}else if(pUSARTx==UART4_REG){
			((RCC_REG -> APB1ENR) &= ~(1<<19));
		}
		else if(pUSARTx==UART5_REG){
			((RCC_REG -> APB1ENR) &= ~(1<<20));
		}else if(pUSARTx==USART6_REG){
			((RCC_REG -> APB2ENR) &= ~(1<<5));

		}
	}
}

void USART_PeripheralControl(USART_Handle_t *pUSARTHandle,uint8_t EnorDi){
	if(EnorDi == ENABLE){
		pUSARTHandle->pUARTx->CR1 |= (1<<USART_CR1_UE);
	}else{
		pUSARTHandle->pUARTx->CR1 &= ~(1<<USART_CR1_UE);
	}
}

uint8_t USART_GetFlagStatus(USARTx_Reg_t *pUSARTx,uint8_t StatusFlagName){
	if(pUSARTx->SR & StatusFlagName){
		return FLAG_SET;
	}
	return FLAG_RESET;
}


void USART_ClearFlag(USARTx_Reg_t *pUSARTx,uint16_t StatusFlagName){
	pUSARTx->SR &= ~(1<<StatusFlagName);
}


void USART_Init(USART_Handle_t *pUSARTHandle)
{

	//Temporary variable
	uint32_t tempreg=0;

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUARTx, ENABLE);

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if (pUSARTHandle->USARTConfig.Mode == USART_MODE_ONLY_RX)
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
	}else if (pUSARTHandle->USARTConfig.Mode == USART_MODE_ONLY_TX)
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );

	}else if (pUSARTHandle->USARTConfig.Mode == USART_MODE_TXRX)
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USARTConfig.WordLength << USART_CR1_M ;


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USARTConfig.Parity_Ctrl == USART_PARITY_EN_EVEN)
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USARTConfig.Parity_Ctrl == USART_PARITY_EN_ODD )
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);

	}

   //Program the CR1 register
	pUSARTHandle->pUARTx->CR1 = tempreg;

/******************************** Configuration of CR2******************************************/

	tempreg=0;

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USARTConfig.No_of_Stop_Bits << USART_CR2_STOP;

	//Program the CR2 register
	pUSARTHandle->pUARTx->CR2 = tempreg;

/******************************** Configuration of CR3******************************************/

	tempreg=0;

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USARTConfig.HW_Flow_Ctrl == USART_HW_FLOW_CTRL_CTS)
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);


	}else if (pUSARTHandle->USARTConfig.HW_Flow_Ctrl == USART_HW_FLOW_CTRL_RTS)
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);

	}else if (pUSARTHandle->USARTConfig.HW_Flow_Ctrl == USART_HW_FLOW_CTRL_CTS_RTS)
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
		tempreg |= ( 1 << USART_CR3_CTSE);
	}


	pUSARTHandle->pUARTx->CR3 = tempreg;

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUARTx,pUSARTHandle->USARTConfig.BAUD);
}

void USART_deinit(USARTx_Reg_t *pUSARTx){
	if(pUSARTx==USART1_REG){
		((RCC_REG -> APB2RSTR) |= (1<<4));
		((RCC_REG -> APB2RSTR) &= ~(1<<4));
	}
	else if(pUSARTx==USART2_REG){
		((RCC_REG -> APB1RSTR) |= (1<<17));
		((RCC_REG -> APB1RSTR) &= ~(1<<17));
	}else if(pUSARTx==USART3_REG){
		((RCC_REG -> APB1RSTR) |= (1<<18));
		((RCC_REG -> APB1RSTR) &= ~(1<<18));
	}else if(pUSARTx==UART4_REG){
		((RCC_REG -> APB1RSTR) |= (1<<19));
		((RCC_REG -> APB1RSTR) &= ~(1<<19));
	}
	else if(pUSARTx==UART5_REG){
		((RCC_REG -> APB1RSTR) |= (1<<20));
		((RCC_REG -> APB1RSTR) &= ~(1<<20));
	}else if(pUSARTx==USART6_REG){
		((RCC_REG -> APB2RSTR) |= (1<<5));
		((RCC_REG -> APB2RSTR) &= ~(1<<5));

	}
}



void USART_SetBaudRate(USARTx_Reg_t *pUSARTx, uint32_t BaudRate)
{

	//Variable to hold the APB clock
	uint32_t PCLKx;

	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1_REG || pUSARTx == USART6_REG)
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
  }else
  {
	   //over sampling by 16
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
}


void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUARTx,USART_FLAG_TXE));

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USARTConfig.WordLength== USART_WORDLEN_9BITS)
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
			pUSARTHandle->pUARTx->DR = (*pdata & (uint16_t)0x01FF);

			//check for USART_ParityControl
			if(pUSARTHandle->USARTConfig.Parity_Ctrl== USART_PARITY_DISABLE)
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
				pTxBuffer++;
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);

			//Implement the code to increment the buffer address
			pTxBuffer++;
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUARTx,USART_FLAG_TC));
}



void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
	{
		//Implement the code to wait until RXNE flag is set in the SR
		while( ! USART_GetFlagStatus(pUSARTHandle->pUARTx,USART_FLAG_RXNE));

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USARTConfig.WordLength == USART_WORDLEN_9BITS)
		{
			//We are going to receive 9bit data in a frame

			//check are we using USART_ParityControl control or not
			if(pUSARTHandle->USARTConfig.Parity_Ctrl == USART_PARITY_DISABLE)
			{
				//No parity is used. so, all 9bits will be of user data

				//read only first 9 bits. so, mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUARTx->DR  & (uint16_t)0x01ff);

				//Now increment the pRxBuffer two times
				pRxBuffer++;
				pRxBuffer++;
			}
			else
			{
				//Parity is used, so, 8bits will be of user data and 1 bit is parity
				 *pRxBuffer = (pUSARTHandle->pUARTx->DR  & (uint8_t)0xFF);

				 //Increment the pRxBuffer
				pRxBuffer++;
			}
		}
		else
		{
			//We are going to receive 8bit data in a frame

			//check are we using USART_ParityControl control or not
			if(pUSARTHandle->USARTConfig.Parity_Ctrl == USART_PARITY_DISABLE)
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				 *pRxBuffer = pUSARTHandle->pUARTx->DR;
			}

			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUARTx->DR  & (uint8_t)0x7f);

			}

			//increment the pRxBuffer
			pRxBuffer++;
		}
	}

}


uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len)
{
	uint8_t txstate = pUSARTHandle->TxBusyState;

	if(txstate != USART_BUSY_IN_TX)
	{
		pUSARTHandle->TxLen = Len;
		pUSARTHandle->pTxBuffer = pTxBuffer;
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;

		//Implement the code to enable interrupt for TXE
		pUSARTHandle->pUARTx->CR1 |= (1<<USART_CR1_TXEIE);


		//Implement the code to enable interrupt for TC
		pUSARTHandle->pUARTx->CR1 |= (1<<USART_CR1_TCIE);


	}

	return txstate;

}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
	uint8_t rxstate = pUSARTHandle->RxBusyState;

	if(rxstate != USART_BUSY_IN_RX)
	{
		pUSARTHandle->RxLen = Len;
		pUSARTHandle->pRxBuffer = pRxBuffer;
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;

		(void)pUSARTHandle->pUARTx->DR;
		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUARTx->CR1 |= (1<<USART_CR1_RXNEIE);

	}

	return rxstate;

}



void USART_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnorDi){

	if (EnorDi==ENABLE){

		if (-1<IRQNumber && IRQNumber<32){
			*NVIC_ISER0 |= (1<<(IRQNumber));
		}else if(31<IRQNumber && IRQNumber<64){
			*NVIC_ISER1 |= (1<<(IRQNumber%32));

		}else if(63<IRQNumber && IRQNumber<96){
			*NVIC_ISER2 |= (1<<(IRQNumber%32));
		}

	}else{
		if (-1<IRQNumber && IRQNumber<32){
			*NVIC_ICER0 |= (1<<(IRQNumber));
		}else if(31<IRQNumber && IRQNumber<64){
			*NVIC_ICER1 |= (1<<(IRQNumber%32));

		}else if(63<IRQNumber && IRQNumber<96){
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
		}
	}
}

void USART_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
	uint8_t temp1 = (IRQNumber/4);
	uint8_t temp2 = (IRQNumber%4);
	temp2 = (8*temp2)+ (8-NO_BITS_PR_IMPLEMENTED);
	*(NVIC_IPR + temp1) |= (IRQPriority <<(temp2));
}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle){
	uint8_t temp1,temp2;

	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_TCIE));
	temp2 =  (pUSARTHandle->pUARTx->SR & (1<<USART_SR_TC));
	if(temp1 && temp2){
		if(pUSARTHandle->TxBusyState==USART_BUSY_IN_TX){
			if(pUSARTHandle->TxLen==0){

				pUSARTHandle->pUARTx->SR &= ~(1<<USART_SR_TC);

				pUSARTHandle->pUARTx->CR1 &= ~(1<<USART_CR1_TCIE);

				pUSARTHandle->TxBusyState=USART_READY;

				pUSARTHandle->TxLen=0;

				pUSARTHandle->pTxBuffer=NULL;

				USART_EventCallBack(pUSARTHandle, USART_TX_COMPLT);
			}
		}
	}

	temp1 = (pUSARTHandle->pUARTx->CR3 & (1<<USART_CR3_CTSIE));
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_CTS));

	if(temp1 && temp2){
		pUSARTHandle->pUARTx->SR &= ~(1<<USART_SR_CTS);
		USART_EventCallBack(pUSARTHandle, USART_CTS_RAISED);
	}
	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_TXEIE));
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_TXE));

	if(temp1 && temp2){
		if(pUSARTHandle->TxBusyState==USART_BUSY_IN_TX){
			if(pUSARTHandle->TxLen>0){
				if(pUSARTHandle->USARTConfig.WordLength== USART_WORDLEN_9BITS)
				{
					//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
					pUSARTHandle->pUARTx->DR = (*pdata & (uint16_t)0x01FF);

					//check for USART_ParityControl
					if(pUSARTHandle->USARTConfig.Parity_Ctrl== USART_PARITY_DISABLE)
					{
						//No parity is used in this transfer. so, 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
						pUSARTHandle->pTxBuffer++;
					}
					else
					{
						//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUARTx->DR = (*(pUSARTHandle->pTxBuffer)  & (uint8_t)0xFF);

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
				}
			}
			if(pUSARTHandle->TxLen==0){
				pUSARTHandle->pUARTx->CR1 &= ~(1<<USART_CR1_TXEIE);
			}
		}
	}
	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_RXNEIE));
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_RXNE));

	if(temp1 && temp2){

	}
	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_RXNEIE));
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_ORE));

	if(temp1 && temp2){
		Clear_OVR_IDLE_FLAG(pUSARTHandle);
		USART_EventCallBack(pUSARTHandle, USART_ORE_RAISED);
	}
	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_IDLEIE));
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_IDLE));

	if(temp1 && temp2){
		Clear_OVR_IDLE_FLAG(pUSARTHandle);
		USART_EventCallBack(pUSARTHandle, USART_IDLE_RAISED);
	}


}

__weak void USART_EventCallBack(USART_Handle_t *pUSARTHandle , uint8_t AppEv){

}



