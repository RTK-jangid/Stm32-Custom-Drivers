/*
 * stm32_slave.c
 *
 *  Created on: Mar 27, 2024
 *      Author: ritik
 */






#include "stm32f407xx.h"
#include<stdint.h>
#include<stdio.h>
#include<string.h>


uint8_t some[32] = "Stm32 is sending data...";




void delay(void){
	for(int i=0;i<500000;i++);
}



void I2C1_inits(I2C_Handle_t *pI2CHandle){

	pI2CHandle->pI2Cx = I2C1_REG;


	pI2CHandle->I2CConfig.I2C_ACKControl = I2C_ACK_ENABLE;
	pI2CHandle->I2CConfig.I2C_DeviceAddress = 0x68;
	pI2CHandle->I2CConfig.I2C_FMDutyCycle = I2C_FM_DUTY_2;
	pI2CHandle->I2CConfig.I2C_SCLSpeed = I2C_SCL_SPEED_STD;


	I2C_init(pI2CHandle);

}


void GPIO_INITs(void){

	GPIO_Handle_t gpioB;

	gpioB.pGPIOx=GPIOB_REG;

	gpioB.GPIO_PinConfig.PinMode=GPIO_MODE_ALTFUN;
	gpioB.GPIO_PinConfig.PinAltFunMode=4;
	gpioB.GPIO_PinConfig.PinOPType=GPIO_OP_TYPE_OD;
	gpioB.GPIO_PinConfig.PinPuPdControl=GPIO_PU;
	gpioB.GPIO_PinConfig.PinSpeed=GPIO_OSPEED_MED;

	//SCL
	gpioB.GPIO_PinConfig.PinNumber=GPIO_PIN_NO_8;
	GPIO_init(&gpioB);

	//SDA
	gpioB.GPIO_PinConfig.PinNumber=GPIO_PIN_NO_9;
	GPIO_init(&gpioB);

}
I2C_Handle_t i2c1;

int main(){



	GPIO_INITs();

	I2C1_inits(&i2c1);

	I2C_IRQConfig(I2C1_EV_IRQ_NO, ENABLE);
	I2C_IRQConfig(I2C1_ER_IRQ_NO, ENABLE);

	I2C_SlaveEnableDisable_IT_Bits(I2C1_REG, ENABLE);

	I2C_Enable(I2C1_REG, ENABLE);

	Manage_Acking(&i2c1,ENABLE);


	while(1);
	return 0;
}

void I2C1_EV_IRQHandler(void){
	I2C_EV_IRQHandling(&i2c1);
}

void I2C1_ER_IRQHandler(void){
	I2C_ERR_IRQHandling(&i2c1);
}

void I2C_ApplicationCallBack(I2C_Handle_t *pI2CHandle,uint8_t AppEv){
	static uint8_t comm = 0;
	static uint8_t ptr =0 ;
	printf("%d \n",comm);
	if(AppEv==I2C_EV_REQ){
		if(comm==0x51){
			I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)some));
		}else if(comm==0x52){
			I2C_SlaveSendData(pI2CHandle->pI2Cx, some[ptr++]);
		}
		printf("Transmit\n");
	}else if(AppEv ==I2C_EV_REC){
		comm = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
		printf("Recieve\n");
	}else if(AppEv ==I2C_ERROR_AF){
		ptr=0;
		comm = 0xff;
		printf("AF\n");
	}else if (AppEv == I2C_EV_STOP){
		printf("STOP\n");
	}

}

